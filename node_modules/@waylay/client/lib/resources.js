'use strict'
const { URL } = require('url')
const omit = require('lodash.omit')
const reduce = require('lodash.reduce')

const BatchResource = require('./resource.batch')
const batch = require('./resources.batch')
const { getBaseUrl, setBaseUrl } = require('./util/api-baseurl-fallback')

/**
 * @namespace Resources
 */
class Resources extends BatchResource {
  constructor (options, client) {
    super(options, client)
    this.batch = batch.bind(this)()
  }

  /**
   * baseUrl abstraction to make sure that this entity
   * first falls back to the api/engine config
   */
  get data () {
    return this._client.data
  }

  get baseUrl () {
    return getBaseUrl.bind(this)()
  }

  set baseUrl (baseUrl) {
    return setBaseUrl.bind(this)(baseUrl)
  }

  /**
   * Create a new Waylay resource
   * @param  {Object} resource The metadata structure of the resource (must include an id key, all other key value pairs are optional)
   * @param  {string} resource.id The id of the resource you want to create
   * @example
   * await waylay.resources.create({ id: 'testSDKDocs', name: 'test' })
   * @return {Promise<Object>} Promise with the status of the creation of the resource
   * @example // Response on resolve
   * {
   *   "statusCode": 201,
   *   "uri": "/api/resources/testSDKDocs",
   *   "entity": {
   *     "id": "testSDKDocs",
   *     "name": "test"
   *   }
   * }
   */
  create (resource) {
    return this._request({
      path: '/api/resources',
      method: 'POST',
      data: resource
    })
  }

  /**
   * Retrieve info from a resource
   * @param  {string} id The resource Id
   * @param  {Object} [opts={}] Add options you want to pass to the request
   * @return {Promise<Object>}
   * @example await waylay.resources.get('testresource')
   * @example //Response on resolve
   * {
   *  "id": "testresource",
   *  "resourceTypeId": "SampleResourceType"
   *  "parentId": "testresourceParent"
   * }
   */
  get (id, opts = {}) {
    const options = Object.assign({}, {
      path: `/api/resources/${id}`
    }, opts)

    return this._request(options)
  }

  /**
   * Retrieves the child resources of the specified resource.
   * @param  {string} id The resourceId
   * @param {Object} params Parameters you want to pass to the request
   * @param {number} [params.limit=10] Maximum number of entries fetched
   * @param {number} [params.skip=0] Number of entries that will be skipped
   * @param {boolean} [params.denormalized] To retrieve the normalized representation of the children.
   * @return {Promise<Object>}
   * @example await waylay.resources.children('testresource', { skip: 0, limit: 100, denormalized: false })
   * @example // Response on resolve
   * {
   *  "values": [{...},{...},{...},{...},{...}],
   *  "skip": 0,
   *  "limit": 100,
   *  "total": 5
   * }
   */
  children (id, params) {
    const queryParams = Object.assign({
      limit: 10,
      skip: 0
    }, params)

    const options = Object.assign({}, {
      path: `/api/resources/${id}/children`,
      params: queryParams
    })

    return this._request(options)
  }

  /**
   * Retrieves the parent resource of the specified resource.
   * @param  {string} id The resourceId
   * @return {Promise<Object>} On resolve returns the metadata structure of the parent resource
   * @example await waylay.resources.parent('testresource')
   * @example // Response on resolve
   * {
   *   "id": "testresourceParent"
   *   "resourceTypeId": "SampleResourceType"
   * }
   */
  async parent (id) {
    const options = Object.assign({}, {
      path: `/api/resources/${id}`
    })

    const resource = await this._request(options)

    const { parentId } = resource

    if (!parentId) return undefined

    const parentOptions = Object.assign({}, {
      path: `/api/resources/${parentId}`
    })

    return this._request(parentOptions)
  }

  /**
   * Retrieves the resources that where referenced by the specified resource.
   * @param  {string} id The resourceId
   * @return {Promise<Object>}
   * @example await waylay.resources.references('testresource')
   * @example // Response on resolve
   * {
   *  "values": [{...},{...}],
   *  "skip": 0,
   *  "limit": 100,
   *  "total": 2
   * }
   */
  async references (id) {
    const options = Object.assign({}, {
      path: `/api/resources/${id}`,
      headers: { Accept: 'application/hal+json' }
    })

    const { _links } = await this._request(options)

    const filteredLinks = omit(_links, ['self', 'children', 'parent', 'resourceType'])

    if (Object.entries(filteredLinks).length === 0) return undefined

    const stringCall = reduce(filteredLinks, (result, value, key) => {
      result += `id=${value.id}&`
      return result
    }, '')

    // removes the & at the end
    const call = stringCall.slice(0, -1)

    const refOptions = Object.assign({}, {
      path: `/api/resources?${call}`
    })

    return this._request(refOptions)
  }

  /**
   * Retrieves the referrer resources of the specified resource.
   * @param  {string} id The resourceId
   * @param {Object} params Parameters you want to pass to the request
   * @param {number} [params.limit=10] Maximum number of entries fetched
   * @param {number} [params.skip=0] Number of entries that will be skipped
   * @return {Promise<Object>}
   * @example await waylay.resources.referrers('testresource', { skip: 0, limit: 100 })
   * @example // Response on resolve
   * {
   *  "values": [{...},{...},{...},{...},{...}],
   *  "skip": 0,
   *  "limit": 100,
   *  "total": 5
   * }
   */
  referrers (id, params = {}) {
    const options = {
      path: `/api/resources/${id}/referrers`,
      params: Object.assign({
        limit: 10,
        skip: 0
      }, params)
    }

    return this._request(options)
  }

  /**
   * Update a resource, allows partial updates
   * @param  {string} id The resourceId
   * @param  {Object} resource The metadata you want to append to the resource
   * @return {Promise<Object>} Returns a Promise for the object of the updated resource
   * @example await waylay.resources.update('testresource', {
   * exampleKey1: 'value1',
   * exampleKey2: 2,
   * exampleKey3: true
   * })
   * @example // Response on resolve
   * {
   *  "id": "testresource",
   *  "parentId": "Bearing_1",
   *  "name": "testresource",
   *  "exampleKey1": "value1",
   *  "exampleKey2": 2,
   *  "exampleKey3": true
   * }
   */
  update (id, resource) {
    return this._request({
      path: `/api/resources/${id}`,
      method: 'PATCH',
      data: resource
    })
  }

  /**
   * Replace a resource, overwrites the existing resource.
   * @param  {string} id The resourceId
   * @param  {Object} resource The metadata you want to replace the current metadata with
   * @return {Promise<Object>}
   * @example await waylay.resources.replace('testresource', {
   *  exampleKey1: 'value1',
   *  exampleKey2: 2,
   *  exampleKey3: true
   * })
   * @example // Response on resolve
   * {
   *  "id": "testresource",
   *  "exampleKey1": "value1",
   *  "exampleKey2": 2,
   *  "exampleKey3": true
   * }
   */
  replace (id, resource) {
    return this._request({
      path: `/api/resources/${id}`,
      method: 'PUT',
      data: resource
    })
  }

  /**
   * Remove a resource
   * @param  {string} id The resourceId
   * @return {Promise<string>} Promise will be rejected when remove action fails
   * @example await waylay.resources.remove('testresource')
   */
  remove (id) {
    return this._request({
      path: `/api/resources/${id}`,
      method: 'DELETE'
    })
  }

  /**
   * Search for a resource matching the filter
   *
   * See {@link https://docs.waylay.io/#/api/resources/#query-resources} for more information
   * @param {Object} params Parameters to specify query
   * @param {string} [params.filter] partial match on multiple fields
   * @param {string} [params.tag] Whole word match on resource tags
   * @param {string} [params.id] Whole word match on the resourceId
   * @param {string} [params.provider] Whole word match on resource provider
   * @param {string} [params.customer] Whole word match on resource customer
   * @param {string} [params.resourceTypeId] Whole word match on resourceType
   * @param {string} [params.distance] find resource within distance (e.g. 100km, 200km, 500m) for resources where location metadata is defined. lat and lon must also be specified in the query
   * @param {number} [params.lat]
   * @param {number} [params.lon]
   * @param {string} [params.q] elasticsearch query string See {@link https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-query-string-query.html#query-string-syntax}
   * @param {boolean} [params.toplevelOnly] Will only return resource without parent when set to `true`
   * @param {Object} opts Add options you want to pass to the request library
   * @param {number} [params.limit] Maximum number of entries fetched
   * @param {number} [params.skip] Number of entries that will be skipped
   * @return {Promise<Object>}
   * @example await waylay.resources.search({
   *  filter: 'a',
   *  skip: 0,
   *  limit: 100
   * })
   * @example // Response on resolve
   * {
   *  "values": [{...},{...},{...},{...},{...},{...},{...},{...}],
   *  "skip": 0",
   *  "limit": 100,
   *  "total": 8
   * }
   */
  search (params, opts = {}) {
    const options = Object.assign({}, {
      path: '/api/resources',
      params
    }, opts)

    return this._request(options)
  }

  /**
   * Executes a command defined on ResourceType / Resource level
   * @param  {string} resource
   * @param  {string} command The name of the command that needs to be executed (defined on the resourceType)
   * @param  {Object} properties An object with the properties that are the input for the defined actuator in the command
   * @return {Promise<Object>}
   * @example await waylay.resources.executeCommand('testresource', 'testCommand')
   * @example // Response on resolve
   * {
   *   "message": "Published command for testresource",
   *   "content": {
   *    "name": "testCommand",
   *    "timestamp": 1616743972539
   *  }
   *}
   */
  executeCommand (resource, command, properties) {
    const commandObject = {
      name: command
    }

    const body = Object.assign({}, properties, commandObject)

    return this.data._request({
      path: `/resources/${resource}/commands`,
      method: 'POST',
      data: body
    })
  }

  /**
   * This returns a paged list with the command logs.
   *
   * See {@link https://docs.waylay.io/#/api/resources/?id=retrieve-resource-command-log} for more information
   * @param {string} resource
   * @param {Object} opts Add options you want to pass to the request library
   * @param {number} [opts.limit=10] Maximum number of entries fetched
   * @param {number} [opts.skip=0] Number of entries that will be skipped
   * @return {Promise<Object>}
   * @example await waylay.resources.commandLogs('testresource', { skip: 0, limit: 10 })
   * @example // Response on resolve
   * {
   *  "values": [
   *   {
   *     "name": "testCommand",
   *     "executionTime": "2021-03-26T07:32:52.539Z",
   *     "errorMessage": "Resource 'testresource' not found"
   *   }
   *  ],
   *  "skip": 0,
   *  "limit": 10,
   *  "total": 1
   *
   * }
   */
  commandLogs (resource, opts = {}) {
    const params = Object.assign({
      limit: 10,
      skip: 0
    }, opts)

    const baseUrl = this._client.baseUrl
    const url = new URL(`/api/resources/${resource}/commands`, baseUrl).href
    const options = Object.assign({}, {
      url,
      params
    })

    return this._request(options)
  }

  /**
   * Fetch resource history
   *
   * See {@link https://docs.waylay.io/#/api/resources/#retrieve-resource-change-log} for more information
   * @param {string} resource
   * @param {Object} query Specify optional pagination parameters.
   * @param {Number} [query.limit=10] Maximum number of entries fetched
   * @param {Number} [query.skip=0] Number of entries that will be skipped
   * @return {Promise<Object>}
   * @example await waylay.resources.changelog('testresource', { skip: 0, limit: 10 })
   * @example // Response on resolve
   * {
   * "values": [
   *  {
   *    "time": "2021-03-25T09:56:46.193Z",
   *    "resourceId": "testresource",
   *    "userId": "292ffd11-231a-4b70-9457-e48e61018f21",
   *    "change": "updated",
   *    "resource": {
   *      "id": "testresource",
   *      "parentId": "testresourceParent",
   *      "name": "testresource",
   *      "testRef1": {
   *        "$ref": "/resources/testresourceParent"
   *      }
   *    }
   *  },{...},{...},{...},{...},{...},{...},{...},{...},{...}
   * ],
   * "skip": 0,
   * "limit": 10,
   * "total": 21
   * }
   */
  changelog (resource, query = {}) {
    const params = Object.assign({
      limit: 10,
      skip: 0
    }, query)

    // Should merge options
    const options = {
      path: `/api/resources/${resource}/changes`,
      headers: { 'Accept': 'application/vnd.waylay.paged+json' },
      params
    }

    return this._request(options)
  }
}

module.exports = Resources
