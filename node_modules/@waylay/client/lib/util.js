'use strict'

const jwtDecode = require('jwt-decode')
const isPlainObject = require('lodash.isplainobject')
const isBuffer = require('is-buffer')

const isString = value => typeof value === 'string'
const isObject = value => isPlainObject(value)
// Supports both Node Buffer and TypedArray
const isBinary = value => isBuffer(value) || ArrayBuffer.isView(value)

// null and undefined signal that the user wants the latest version
function wantsLatestVersion (input) {
  if (!input) return true
  return ['latest', '*'].some(s => s === input)
}

function getMime (value) {
  const MIME_MAP = [
    { fn: isString, mime: 'text/plain' },
    { fn: isObject, mime: 'application/json' },
    { fn: isBinary, mime: 'application/octet-stream' }
  ]

  const match = MIME_MAP.find(({ fn }) => fn(value))
  if (!match) throw new TypeError(`Unsupported vault data type: ${typeof value}`)

  return match.mime
}

function tokenHasExpired (token) {
  const { exp } = jwtDecode(token)
  const expiredDate = new Date(exp * 1000)

  // 1 minute before the token actually expires, accounts for clock drift
  const drift = 1 * 60 * 1000

  const isExpired = expiredDate - drift < new Date()
  return isExpired
}

module.exports = {
  getMime,
  isString,
  isBinary,
  isObject,
  wantsLatestVersion,
  tokenHasExpired
}
