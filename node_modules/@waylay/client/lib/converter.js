'use strict'
const FormData = require('form-data')
const Resource = require('./resource')

/**
 * @namespace Converter
 * @description Configure and test converter configurations for channels
 */
class Converter extends Resource {
  /**
   * Get all converters
   *
   * @return {Promise} An object with converters as properties
   */
  getAll () {
    return this._request({
      path: `/converter/`,
      method: 'GET'
    })
  }

  /**
   * Get a converter by name
   *
   * @param {string} converterName
   * @return {Promise} A converter object
   */
  get (converterName) {
    return this._request({
      path: `/converter/${converterName}`,
      method: 'GET'
    })
  }

  /**
   * Create a converter
   *
   * @param {string} converterName
   * @param {string} type
   * @param {string} template
   * @return {Promise} A converter object
   */
  create (converterName, type, template) {
    const body = { type, template }
    return this._request({
      path: `/converter/${converterName}`,
      method: 'PUT',
      data: body
    })
  }

  /**
   * Update an existing converter
   *
   * @param {string} converterName
   * @param {string} type
   * @param {string} template
   * @return {Promise} A converter object
   */
  update (converterName, type, template) {
    const body = { type, template }
    return this._request({
      path: `/converter/${converterName}`,
      method: 'PUT',
      data: body
    })
  }

  /**
   * Delete an existing converter
   *
   * @param {string} converterName
   * @return {Promise} A converter object
   */
  delete (converterName) {
    return this._request({
      path: `/converter/${converterName}`,
      method: 'DELETE'
    })
  }

  /**
   * Convert a payload using an existing converter.
   * <strong>Requires NodeJS runtime</strong>
   *
   * @param {string} converterName
   * @param {Object} payload
   * @param {boolean} forward Forward to broker. Default false
   * @return {Promise} A converter object
   */
  convert (converterName, payload, params) {
    const formData = new FormData()
    formData.append('payload', Buffer.from(JSON.stringify(payload), 'utf-8'), {
      filename: 'payload.json',
      contentType: 'application/json'
    })
    return this._request({
      path: `/converter/${converterName}/convert`,
      method: 'POST',
      data: formData,
      params: params
    })
  }

  /**
   * Test a payload conversion without saving a converter.
   * <strong>Requires NodeJS runtime</strong>
   *
   * @param {string} type
   * @param {string} template
   * @param {Object} payload
   * @return {Promise} A converter object
   */
  test (type, template, payload) {
    const config = { type, template }
    const formData = new FormData()

    formData.append('payload', Buffer.from(JSON.stringify(payload), 'utf-8'), {
      filename: 'payload.json',
      contentType: 'application/json'
    })

    formData.append('config', Buffer.from(JSON.stringify(config), 'utf-8'), {
      filename: 'config.json',
      contentType: 'application/json'
    })

    return this._request({
      path: `/converter/test`,
      method: 'POST',
      data: formData
    })
  }
}

module.exports = Converter
