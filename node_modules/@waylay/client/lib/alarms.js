'use strict'

const BatchResource = require('./resource.batch')
const batch = require('./alarms.batch')

const ALARM_BATCH_OPTIONS = {
  path: '/batch'
}

/**
 * @namespace Alarms
 */
class Alarms extends BatchResource {
  constructor (options, client) {
    super(options, client, ALARM_BATCH_OPTIONS)
    this.batch = batch.bind(this)()
  }

  /**
   * Create a new alarm
   * @param  {Object} alarm Object w/ properties to create an alarm
   * @param  {string} alarm.type Type of the alarm (free string)
   * @param  {string} alarm.text Description of the alarm
   * @param  {string} alarm.severity The severity of the alarm: CRITICAL, MAJOR, MINOR or WARNING
   * @param  {Object} alarm.source Object containing the ID of the resource you want to create the alarm for
   * @param  {string} [alarm.status=ACTIVE] Can be: ACTIVE, ACKNOWLEDGED or CLEARED
   * @param  {string} [alarm.timestamp] ISO date string or number (indicating milliseconds since epoch) (if not specified, timestamp will be set to the receive time)
   * @param  {string} [alarm.assignee] String field to indicate an assignee for the alarm
   * @return {Promise<Object>} Returns a promise for the created alarm
   * @example await waylay.alarms.create({
   *   type: 'TEST_ALARM',
   *   severity: 'MINOR',
   *   text: 'Alarm to test Node SDK',
   *   source: { id: 'testresource' }
   * })
   * @example // Response on resolve
   * {
   *  "id": "ab5dd822-734c-4db4-ae77-7ff1d5426413",
   *  "self": "/alarm/alarms/ab5dd822-734c-4db4-ae77-7ff1d5426413",
   *  "creationTime": "2021-03-26T08:12:10.353149Z",
   *  "type": "TEST_ALARM",
   *  "text": "Alarm to test Node SDK",
   *  "timestamp": "2021-03-26T08:12:10.353115Z",
   *  "source": {
   *   "id": "testresource"
   *  },
   *  "severity": "MINOR",
   *  "status": "ACTIVE",
   *  "count": 1,
   *  "history": [
   *   {
   *     "id": "66208008-603c-46a6-84ba-82cd169cc20a",
   *     "type": "io.waylay.alarm.AlarmRaised",
   *     "text": "Alarm raised",
   *     "timestamp": "2021-03-26T08:12:10.353151Z"
   *   }
   *  ]
   * }
   */
  create (alarm) {
    return this._request({
      method: 'POST',
      path: '/alarm/alarms',
      data: alarm
    })
  }

  /**
   * Get information about an alarm
   * @param  {string} id Unique id given to alarm on creation
   * @return {Promise<Alarm>} Returns a promise for the alarm
   * @example await waylay.alarms.get('ab5dd822-734c-4db4-ae77-7ff1d5426413')
   * @example // Response on resolve
   * {
   *  "id": "ab5dd822-734c-4db4-ae77-7ff1d5426413",
   *  "self": "/alarm/alarms/ab5dd822-734c-4db4-ae77-7ff1d5426413",
   *  "creationTime": "2021-03-26T08:12:10.353Z",
   *  "type": "TEST_ALARM",
   *  "text": "Alarm to test Node SDK",
   *  "timestamp": "2021-03-26T08:12:10.353Z",
   *  "source": {
   *    "id": "testresource"
   *  },
   *  "severity": "MINOR",
   *  "status": "ACTIVE",
   *  "count": 1,
   *  "history": [
   *    {
   *      "id": "66208008-603c-46a6-84ba-82cd169cc20a",
   *      "type": "io.waylay.alarm.AlarmRaised",
   *      "text": "Alarm raised",
   *      "timestamp": "2021-03-26T08:12:10.353151Z"
   *    }
   *  ]
   * }
   */
  get (id) {
    return this._request({
      path: `/alarm/alarms/${id}`
    })
  }

  /**
   * Search for multiple alarms
   *
   * See {@link https://docs.waylay.io/#/api/alarms/?id=query-multiple-alarms|Query multiple alarms}.
   * @param  {Object} query
   * @param  {string} [query.type] Filter on the alarm type
   * @param  {string} [query.status] Filter on the alarm status
   * @param  {string} [query.severity] Filter on the alarm severity
   * @param  {string} [query.source] Filter on the id of the alarm resource
   * @param  {long} [query.dateFrom] Filter on timestamp (milliseconds)
   * @param  {long} [query.dateTo] Filter on timestamp (milliseconds)
   * @param  {string} [query.assignee] Filter on assignee
   * @param  {string} [query.page=1] Paging returns page x
   * @param  {string} [query.size=50] Size of the page
   * @return {Promise<Object>} Returns a promise for an Object containing an array of alarms
   * @example
   * @example // Response on resolve
   * {
   *   "self": "/alarm/alarms?severity=major&page=2&size=10",
   *   "alarms": [{...},{...}],
   *   "total": 12
   *   "prev": "/alarm/alarms?severity=major&size=10"
   * }
   *
   */
  search (query) {
    return this._request({
      path: '/alarm/alarms',
      params: query
    })
  }

  /**
   * Get the alarm history timeline for one or multiple resources,
   * this is used to get a timeseries like array of alarms.
   * @param  {Array<string>} resourceIds Array of resourceIds, min 1
   * @param  {long} [from] Timestamp in milliseconds
   * @param  {long} [to] Timestamp in milliseconds
   * @return {Promise<Alarm[]>} Returns a promise for an array of alarms
   * @example await waylay.alarms.timeline(['testresource'])
   * @example // Response on resolve
   * [
   * {
   *  "timestamp": 1616746330353,
   *  "type": "io.waylay.alarm.AlarmRaised"
   *  "Alarm": {...}
   * },
   * {...}
   * ]
   */
  timeline (resourceIds, from, to) {
    return this._request({
      path: '/alarm/alarms',
      params: {
        source: resourceIds,
        from,
        to
      },
      headers: {
        Accept: 'application/vnd.waylay.alarms.timeseries+json'
      }
    })
  }

  /**
   * Update an alarm
   * You can only update an ACTIVE or ACKNOWLEDGED alarm. Updating a CLEARED alarm will result in a response code 412 Precondition Failed
   * @param {string} id Id of the alarm you want to update
   * @param {Object} alarm Properties you want to change on the alarm
   * @param {string} alarm.severity The severity of the alarm: CRITICAL, MAJOR, MINOR or WARNING
   * @param {string} alarm.status The status of the alarm: ACTIVE, ACKNOWLEDGED or CLEARED
   * @param {string} alarm.assignee The assignee
   * @return {Promise<Object>} A promise for the updated alarm object
   * @example await waylay.alarms.update('56fa5a52-a02c-4551-93ac-197b13fe36db', { severity: 'WARNING', status: 'ACKNOWLEDGED'})
   * @example {
   * "id": "56fa5a52-a02c-4551-93ac-197b13fe36db",
   * "self": "/alarm/alarms/56fa5a52-a02c-4551-93ac-197b13fe36db",
   * "creationTime": "2021-03-26T09:15:58.474Z",
   * "type": "TEST_ALARM",
   * "text": "Alarm to test Node SDK",
   * "timestamp": "2021-03-26T09:15:58.474Z",
   * "source": {
   *   "id": "testresource"
   * },
   * "severity": "WARNING",
   * "status": "ACKNOWLEDGED",
   * "count": 1,
   * "history": [
   *   {
   *     "id": "4fdb9180-04ad-498f-a4f5-6e2b7213f04b",
   *     "type": "io.waylay.alarm.AlarmRaised",
   *     "text": "Alarm raised",
   *     "timestamp": "2021-03-26T09:15:58.474282Z"
   *   },
   *   {
   *     "id": "5ba38c0f-8e54-4e32-b7d2-6d6a192dbc06",
   *     "type": "io.waylay.alarm.AlarmUpdated",
   *    "text": "Alarm updated",
   *    "timestamp": "2021-03-26T09:17:05.954729Z",
   *    "changes": [
   *      {
   *        "attribute": "severity",
   *        "type": "io.waylay.alarm.change.severity",
   *        "oldValue": "MINOR",
   *        "newValue": "WARNING"
   *      },
   *      {
   *        "attribute": "status",
   *        "type": "io.waylay.alarm.change.status",
   *        "oldValue": "ACTIVE",
   *        "newValue": "ACKNOWLEDGED"
   *     }
   *   ]
   * }
   *]}
   */
  update (id, alarm) {
    return this._request({
      method: 'PUT',
      path: `/alarm/alarms/${id}`,
      data: alarm
    })
  }

  /**
   * Remove an alarm
   * @param  {string} id The alarm ID
   * @return {Promise<string>}
   * @example await waylay.alarms.remove('56fa5a52-a02c-4551-93ac-197b13fe36db')
   *
   */
  remove (id) {
    return this._request({
      method: 'DELETE',
      path: `/alarm/alarms/${id}`
    })
  }

  /**
   * Remove all alarms matching a filter
   *
   * See {@link https://docs.waylay.io/#/api/alarms/?id=query-multiple-alarms|Query multiple alarms}.
   * @param  {Object} filter Filter object
   * @param  {string} [filter.type] Filter on the alarm type
   * @param  {string} [filter.status] Filter on the alarm status
   * @param  {string} [filter.severity] Filter on the alarm severity
   * @param  {string} [filter.source] Filter on the id of the alarm resource
   * @param  {long} [filter.dateFrom] Filter on timestamp (milliseconds)
   * @param  {long} [filter.dateTo] Filter on timestamp (milliseconds)
   * @param  {string} [filter.assignee] Filter on assignee
   * @return {Promise}
   * @example await waylay.alarms.remove({ type: 'TEST_ALARM' })
   */
  removeAll (filter) {
    return this._request({
      method: 'DELETE',
      path: `/alarm/alarms`,
      params: filter
    })
  }

  _request (options) {
    options = Object.assign({
      url: this.baseUrl + options.path
    }, options)

    return this._client._request(options)
  }
}

module.exports = Alarms
