'use strict'

const debug = require('debug')('waylay:client')
const prependHttp = require('prepend-http')
const axios = require('axios')
const Url = require('url')
const defaultsDeep = require('lodash.defaultsdeep')
const jwtDecode = require('jwt-decode')
const qs = require('query-string')

const Alarms = require('./alarms')
const Byoml = require('./byoml')
const Data = require('./data')
const Resources = require('./resources')
const Stats = require('./stats')
const Tasks = require('./tasks')
const Types = require('./types')
const Vault = require('./vault')
const Webscripts = require('./webscripts')
const Analytics = require('./analytics')
const Plugs = require('./plugs')
const Policies = require('./policies')
const Templates = require('./templates')
const Settings = require('./settings')
const Converter = require('./converter')
const Constraints = require('./constraints')
const Hoard = require('./hoard')
const Storage = require('./storage')

const Users = require('./auth/users')
const Tenants = require('./auth/tenants')
const Roles = require('./auth/roles')
const PredefinedRoles = require('./auth/predefined-roles')
const Permissions = require('./auth/permissions')
const TwoFA = require('./auth/twoFA')
const Tokens = require('./auth/tokens')
const { tokenHasExpired } = require('./util')

const DEFAULT_OPTIONS = {
  api: { settingsBaseUrlKey: 'waylay_api' },
  actuators: { settingsBaseUrlKey: 'waylay_api' },
  sensors: { settingsBaseUrlKey: 'waylay_api' },
  transformers: { settingsBaseUrlKey: 'waylay_api' },
  tasks: { settingsBaseUrlKey: 'waylay_api' },
  templates: { settingsBaseUrlKey: 'waylay_api' },
  resources: { settingsBaseUrlKey: 'waylay_resources' },
  types: { settingsBaseUrlKey: 'waylay_resources' },
  constraints: { settingsBaseUrlKey: 'waylay_resources' },
  data: { defaultBaseUrl: 'https://data.waylay.io', settingsBaseUrlKey: 'waylay_data' },
  alarms: { defaultBaseUrl: 'https://alarms.waylay.io', settingsBaseUrlKey: 'waylay_alarms' },
  vault: { defaultBaseUrl: 'https://vault.waylay.io', settingsBaseUrlKey: 'waylay_vault' },
  webscripts: { defaultBaseUrl: 'https://webscripts.waylay.io', settingsBaseUrlKey: 'waylay_webscripts' },
  analytics: { defaultBaseUrl: 'https://ts-analytics.waylay.io', settingsBaseUrlKey: 'waylay_analytics' },
  policies: { defaultBaseUrl: 'https://policies.waylay.io', settingsBaseUrlKey: 'waylay_policies' },
  accounts: { defaultBaseUrl: 'https://accounts-api.waylay.io', settingsBaseUrlKey: 'waylay_accounts' },
  byoml: { defaultBaseUrl: 'https://byoml.waylay.io', settingsBaseUrlKey: 'waylay_byoml' },
  stats: { defaultBaseUrl: 'https://stats.waylay.io', settingsBaseUrlKey: 'waylay_stats' },
  sql: { defaultBaseUrl: 'https://sql-connector.waylay.io', settingsBaseUrlKey: 'waylay_sql' },
  converter: { defaultBaseUrl: 'https://converter.waylay.io', settingsBaseUrlKey: 'waylay_converter' },
  hoard: { defaultBaseUrl: 'https://auth.waylay.io', settingsBaseUrlKey: 'waylay_hoard' },
  storage: { defaultBaseUrl: 'https://storage.waylay.io', settingsBaseUrlKey: 'waylay_storage' },
  registry: { defaultBaseUrl: 'https://plugs.waylay.io', settingsBaseUrlKey: 'waylay_registry' }
}

const NO_DOMAIN = ''

/**
 * @module Waylay
 * @namespace Waylay
 * The Waylay client.
 * @example
 * const Waylay = require('@waylay/client')
 * @example
 * // initialise with apiKey/apiSecret
 * const waylay = new Waylay({ domain: 'my-org.waylay.io', clientID: myApiKey, secret: myApiSecret })
 * @example
 * // ... or login with username/password
 * const waylay = new Waylay({ domain: 'my-org.waylay.io' })
 * await waylay.login(username, password)
 * @example
 * // ... or initialise with token
 * const waylay = new Waylay({ token: myStoredWaylayJwtToken})
 * @example
 * // configure waylay endpoints from tenant configuration automatically
 * const waylay = await new Waylay(<credentials>).loadSettings()
 * @example
 * // ... or provide the tenant organisation settings yourself
 * const waylay = new Waylay(<credentials>).withSettings(myOrgSettings)
 * @param {Object} [options] configuration options for this waylay client
 * @param {string} [options.clientID] the clientID (apiKey) to authenticate this client
 * @param {string} [options.secret] the secret (apiSecret) to authenticate this client
 * @param {string} [options.domain] the tenant domain used by this client (for authentication and as default endpoint). Note that any domain in the token takes precedence.
 * @param {string} [options.token] the jwt token to authenticate this client (alternative to clientId, secret, domain arguments).
 * @param {Object} [options.globalSettings] the organisation settings to use for this client (see {@link #waylaywithsettings withSettings}).
 * @param {string} [options.service.baseUrl] forced endpoint overrides for any waylay service ({@link #waylaywithsettings withSettings}).
 * @property {Data} [data] the <em>data</em> service
 * @property {Resources} [resources] the <em>resources</em> service
 * @property {Alarms} [alarms] the <em>alarms</em> service
 * @property {Types} [types] the <em>types</em> service
 * @property {Constraints} [constraints] the <em>constraints</em> service
 * @property {Transformers} [transformers] the <em>transformers</em> service
 * @property {Tasks} [tasks] the <em>tasks</em> service
 * @property {Templates} [templates] the <em>templates</em> service
 * @property {Sensors} [sensors] the <em>sensors</em> service
 * @property {Actuators} [actuators] the <em>actuators</em> service
 * @property {Converter} [converter] the <em>converter</em> service
 * @property {Webscripts} [webscripts] the <em>webscripts</em> service
 * @property {Byoml} [byoml] the <em>byoml</em> service
 * @property {Storage} [storage] the <em>storage</em> service
 * @property {Analytics} [analytics] the <em>analytics</em> service
 * @property {Vault} [vault] the <em>vault</em> service
 * @property {Stats} [stats] the <em>stats</em> service
 * @property {Users} [users] the <em>users</em> service
 * @property {Policies} [policies] the <em>policies</em> service
 * @property {Tenants} [tenants] the <em>tenants</em> service
 * @property {Roles} [roles] the <em>roles</em> service
 * @property {PredefinedRoles} [predefinedRoles] the <em>predefinedRoles</em> service
 * @property {Permissions} [permissions] the <em>permissions</em> service
 * @property {TwoFA} [twoFA] the <em>twoFA</em> service
 * @property {Hoard} [hoard] the <em>hoard</em> service
 */
class Waylay {
  constructor (options = {}) {
    const compatibilityOpts = {
      accounts: options.auth,
      actuators: options.api,
      sensors: options.api,
      transformers: options.api,
      types: options.types ? options.types : options.api,
      tasks: options.api,
      resources: options.resources ? options.resources : options.api,
      templates: options.api,
      constraints: options.constraints ? options.constraints : options.api
    }
    const opts = defaultsDeep({}, options, compatibilityOpts, DEFAULT_OPTIONS)

    this.setToken(opts.token)
    this.setRefreshToken(opts.refreshToken)

    this.wantsFullResponse = opts.fullResponse || false
    this.auth = (opts.clientID && opts.secret) ? {
      username: opts.clientID,
      password: opts.secret
    } : undefined
    this.setDomain(opts.domain)
    if (opts.globalSettings) {
      this.withSettings(opts.globalSettings)
    }

    this.httpClient = axios.create(opts.httpClient)

    this.actuators = new Plugs({ ...opts.actuators, registry: opts.registry }, this, 'actions')
    this.sensors = new Plugs({ ...opts.sensors, registry: opts.registry }, this, 'sensors')
    this.transformers = new Plugs({ ...opts.transformers, registry: opts.registry }, this, 'transformers')
    this.types = new Types(opts.types, this)
    this.tasks = new Tasks(opts.tasks, this)
    this.data = new Data(opts.data, this)
    this.resources = new Resources(opts.resources, this)
    this.alarms = new Alarms(opts.alarms, this)
    this.vault = new Vault(opts.vault, this)
    this.webscripts = new Webscripts({ ...opts.webscripts, registry: opts.registry }, this)
    this.analytics = new Analytics(opts.analytics, this)
    this.policies = new Policies(opts.policies, this)
    this.templates = new Templates(opts.templates, this)
    this.organisationSettings = new Settings(opts.api, this)
    this.users = new Users(opts.accounts, this)
    this.tenants = new Tenants(opts.accounts, this)
    this.roles = new Roles(opts.accounts, this)
    this.predefinedRoles = new PredefinedRoles(opts.accounts, this)
    this.permissions = new Permissions(opts.accounts, this)
    this.twoFA = new TwoFA(opts.accounts, this)
    this.tokens = new Tokens(opts.accounts, this)
    this.converter = new Converter(opts.converter, this)
    this.byoml = new Byoml(opts.byoml, this)
    this.stats = new Stats(opts.stats, this)
    this.constraints = new Constraints(opts.constraints, this)
    this.hoard = new Hoard(opts.hoard, this)
    this.storage = new Storage(opts.storage, this)

    // add refresh token interceptor, only runs when token and refreshToken have been configured
    // we do not mutate the HTTP client config here, but instead mutate the token and refresh_token
    // se the _request function works with the correct token and authentication schema
    // we cannot test this since moxios doesn't have the functionality to test interceptors
    /* istanbul ignore next */
    this.httpClient.interceptors.request.use((config) => {
      if (!shouldRefreshToken(config)) {
        return config
      }

      return this.tokens.refresh()
        .then(({ token, refresh_token: tokenRefresh }) => {
          this.setToken(token)
          this.setRefreshToken(tokenRefresh)

          return config
        })
    }, (error) => {
      console.error('Failed to refresh token')
      console.error(error)
    })

    /* istanbul ignore next */
    const shouldRefreshToken = (config) => {
      const params = config.params
      const isRefreshing = params && params.grant_type === 'refresh_token'

      if (isRefreshing) {
        return false
      }

      const hasTokens = this._token && this._refreshToken
      if (!hasTokens) {
        return false
      }

      const validTokens = tokenHasExpired(this._token) && !tokenHasExpired(this._refreshToken)

      return !isRefreshing && hasTokens && validTokens
    }
  }

  /**
   * The jwt token used by this client (if any).
   *
   * The token property is initialised by `options.token` in {@link #waylayconstructor constructor}.
   * @returns {string} the jwt token used by this client (if any)
   */
  get token () {
    return this._token
  }

  /**
   * Set (update or clear) the jwt token used by this client (if any)
   * @param {string} token
   */
  set token (token) {
    return this.setToken(token)
  }

  /**
   * The domain effectively used by this client, with the following precedence:
   * * the domain asserted by the jwt token {@link #token token}
   * * the domain as set by the {@link #waylayconstructor constructor}, {@link #waylaysetdomain setDomain} or {@link #waylaydomain domain}
   * * the domain as set from tenant settings by {@link #waylaywithsettings withSettings} (key `waylay_domain`)
   *
   * The domain property is initialised by `options.domain` in {@link #waylayconstructor constructor}.
   * @returns a tenant domain name such as `example.waylay.io`
   */
  get domain () {
    if (this._tokenDomain) {
      return this._tokenDomain
    }
    if (this._domain) {
      return this._domain
    }
    if (this._settings && this._settings.waylay_domain) {
      return this._settings.waylay_domain
    }
    return NO_DOMAIN
  }

  /**
   * Set the (default) domain.
   *
   * Setting this property does NOT overwrite a domain asserted by the {@link #waylaytoken token}.
   * @param {string} domain a tenant domain name such as `example.waylay.io`
   */
  set domain (domain) {
    this.setDomain(domain)
  }

  setToken (token) {
    this._token = token
    this._tokenDomain = null
    try {
      this._tokenDomain = jwtDecode(this._token)['domain']
    } catch (_) { }

    return this
  }

  setRefreshToken (token) {
    this._refreshToken = token
    return this
  }

  setDomain (domain) {
    this._domain = domain

    return this
  }

  /**
   * Obtain a login token using username and password.
   *
   * As a side effect, the token is used by this client for subsequent calls ({@link #waylaytoken token})
   * @param  {string} username
   * @param  {string} password
   * @return {Promise<{ access_token: string, expires_at: number, token_type: string }>}
   *
   * @example
   * const { access_token, expires_at } = waylay.login('my-username', 'and-password')
   * console.log(`token ${access_token} will expire at ${new Date(expires_at)}`)
   */
  login (username, password) {
    return this._request({
      method: 'POST',
      path: '/api/auth/token',
      data: {
        grant_type: 'password',
        username,
        password
      }
    })
      .then(data => {
        this.setToken(data.access_token)
        return data
      })
  }

  /**
   * Ping your Waylay instance
   *
   * @return {Promise<{ statusCode: number, message: string }>}
   */
  ping () {
    return this._request({ path: '/api/ping' })
  }

  /**
   * Retrieve your profile information
   *
   * @return {Promise<{}>}
   */
  me () {
    return this._request({ path: '/api/auth/me' })
  }

  /**
   * Update this client with organisation settings from the {@link #organisationsettings organisationSettings} service,
   * in that way configuring default endpoints.
   *
   * See {@link #waylaywithsettings withSettings} to see how the retrieved settings impact the lookup of services.
   *
   * @return {Promise<Waylay>} this client, with updated organisation settings.
   */
  async loadSettings () {
    return this.settings().then(orgSettings => this.withSettings(orgSettings))
  }

  /**
   * Update this client with organisation settings for the default endpoints (globalSettings).
   * Any previous settings are overwritten by this call.
   *
   * Any service on this client resolves its `baseUrl` with the following precedence:
   * * the {@link #waylayconstructor constructor} argument `options.<service>.baseUrl`
   * * the organisation setting `settings.waylay_<service>` as described below, and set by this method
   * * the waylay default for the service as described below
   * * the default {@link #waylaybaseurl baseUrl} of this client (see below, depends on `api` and `domain` configuration)

   * The organisation settings can be intialised by the `options.globalSettings` argument in the  {@link #waylayconstructor constructor}.
   *
   * A user can initialise organisation settings either from an existing object:
   * ```
   * const waylay = new Waylay({token, globalSettings: myCachedSettings})
   * ```
   * or using the client itself (using the default OrganisationSettings service, requires an async call)
   * ```
   * const waylay = await new Waylay({token}).loadSettings()
   * ```
   * or explicitely using this method.
   *
   * Note that any waylay plugin sandbox (e.g. for sensors and actuators) does this initialization for you
   * before handing over the waylay client.
   *
   * This call only affects the organisation setting used by this client object.
   * See {@link #organisationsettings organisationSettings} to manage the settings for all your users.
   *
   * @param {Object} [settings] The organisation settings containing default endpoints for waylay services. A null argument clears all settings.
   * @param {string} [settings.waylay_data] The default endpoint used for the {@link #data data} service. Overridden by the {@link #waylayconstructor constructor} argument `options.data.baseUrl`.
   *
   * The waylay default is `https://data.waylay.io`.
   * @param {string} [settings.waylay_alarms] The default endpoint used for the {@link #alarms alarms} service, overriden by the {@link #waylayconstructor constructor} argument `options.alarms.baseUrl`.
   *
   * The waylay default is `https://alarms.waylay.io`.
   * @param {string} [settings.waylay_vault] The default endpoint used for the {@link #vault vault} service, overriden by the {@link #waylayconstructor constructor} argument `options.vault.baseUrl`.
   *
   * The waylay default is `https://vault.waylay.io`.
   * @param {string} [settings.waylay_webscripts] The default endpoint used for the {@link #webscripts webscripts} service, overriden by the {@link #waylayconstructor constructor} argument `options.webscripts.baseUrl`.
   *
   * The waylay default is `https://webscripts.waylay.io`.
   * @param {string} [settings.waylay_analytics] The default endpoint used for the {@link #analytics analytics} service, overriden by the {@link #waylayconstructor constructor} argument `options.analytics.baseUrl`.
   *
   * The waylay default is `https://ts-analytics.waylay.io`.
   * @param {string} [settings.waylay_policies] The default endpoint used for the {@link #policies policies} service, overriden by the {@link #waylayconstructor constructor} argument `options.policies.baseUrl`.
   *
   * The waylay default is `https://policies.waylay.io`.
   * @param {string} [settings.waylay_accounts] The default endpoint used for the {@link #accounts accounts} service, overriden by the {@link #waylayconstructor constructor} argument `options.accounts.baseUrl`.
   *
   * The waylay default is `https://accounts-api.waylay.io`.
   * @param {string} [settings.waylay_byoml] The default endpoint used for the {@link #byoml byoml} service, overriden by the {@link #waylayconstructor constructor} argument `options.byoml.baseUrl`.
   *
   * The waylay default is `https://byoml.waylay.io`.
   * @param {string} [settings.waylay_stats] The default endpoint used for the {@link #stats stats} service, overriden by the {@link #waylayconstructor constructor} argument `options.stats.baseUrl`.
   *
   * The waylay default is `https://stats.waylay.io`.
   * @param {string} [settings.waylay_sql] The default endpoint used for the {@link #sql sql} service, overriden by the {@link #waylayconstructor constructor} argument `options.sql.baseUrl`.
   *
   * The waylay default is `https://sql-connector.waylay.io`.
   * @param {string} [settings.waylay_converter] The default endpoint used for the {@link #converter converter} service, overriden by the {@link #waylayconstructor constructor} argument `options.converter.baseUrl`.
   *
   * The waylay default is `https://converter.waylay.io`.
   * @param {string} [settings.waylay_storage] The default endpoint used for the {@link #storage storage} service, overriden by the {@link #waylayconstructor constructor} argument `options.storage.baseUrl`.
   *
   * The waylay default is `https://storage.waylay.io`.
   * @param {string} [settings.waylay_api] The default endpoint used for the waylay api services:
   * {@link #actuators actuators}, {@link #sensors sensors}, {@link #transformers transformers}, {@link #types types},
   * {@link #tasks tasks}, {@link #resources resources} and {@link #templates templates},
   * overriden by the corresponding {@link #waylayconstructor constructor} argument `options.<service>.baseUrl`.
   * Default endpoint for the {@link #organisationsettings organisationSettings} service,
   * overriden by {@link #waylayconstructor constructor} argument `options.api.baseUrl`
   *
   * The waylay default is computed by {@link #waylaybaseurl baseUrl} (depending on the `domain` property).
   * @param {string} [settings.waylay_domain] The tenant domain to which these setting apply. Used as default `baseUrl` for all other services provided by this client.
   *
   * @return {Waylay} this client, with updated organisation settings
   */
  withSettings (settings) {
    this._settings = settings
    return this
  }

  /**
   * Retrieve the organisation settings.
   *
   * @see Waylay.organisationSettings
   * @returns {Promise<Object>} Resolves to an organisation settings object as described in {@link #waylaywithsettings withSettings} and managed by {@link #organisationsettings organisationSettings}
   */
  settings () {
    return this.organisationSettings.list()
  }

  /**
   * The default base url for (unconfigured) services, using the `api` and `domain` configuration.
   * Uses the first that is defined from:
   * * the `api.baseUrl` constructor argument of this client
   * * the `settings.waylay_api` organisation setting
   * * the `domain` constructor argument of this client
   * * the `settings.waylay_domain` organisation setting
   * * the `domain` as stated in the current JWT Token
   *
   * <em>Note</em> the {@link #waylaytoken token} domain has least precedence, contrary to the definition of the {@link #waylaydomain domain} property, where
   * it has greatest precendence.
   * @return {string} a base URL depending on the `api` and `domain` configuration.
   */
  get baseUrl () {
    const settingsApi = this._settings && this._settings['waylay_api']
    const settingsDomain = this._settings && this._settings.waylay_domain

    // adapted precendence rules (see https://github.com/waylayio/waylay-js/issues/112)
    const baseUrl = settingsApi || this._domain || settingsDomain || this._tokenDomain || NO_DOMAIN
    if (baseUrl === NO_DOMAIN) {
      debug('WARNING: requested baseUrl while none of the sources are configured.')
    }
    return prependHttp(baseUrl, { https: true })
  }

  /**
   * Internal request function
   * @private
   * @param  {Object}   Options passed to Axios
   * @return {Promise}
   */
  _request (opts = {}) {
    // assing default options
    opts = Object.assign({
      method: 'GET',
      url: Url.resolve(this.baseUrl, (opts.path || '')),
      paramsSerializer: params => qs.stringify(params, { sort: false })
    }, opts)

    opts.url = isEncoded(opts.url) ? opts.url : encodeURI(opts.url)

    /* istanbul ignore next */
    if (typeof window === 'undefined' && typeof process === 'object') {
      opts.headers = Object.assign({}, opts.headers, {
        'User-Agent': `waylay-js`
      })
    }

    // Client ID / secret authentication (basic auth)
    if (this.auth) {
      opts.auth = this.auth
    }

    // Token authentication
    if (this.token) {
      opts.headers = Object.assign({}, opts.headers, {
        'Authorization': `Bearer ${this.token}`
      })
    }

    debug('Making request: \n%O', opts)

    return this.httpClient(opts)
      .then(resp => {
        const wantsFullResponse = this.wantsFullResponse || opts.wantsFullResponse
        return wantsFullResponse ? resp : resp.data
      })
  }
}

function isEncoded (uri) {
  try {
    return uri !== decodeURIComponent(uri)
  } catch (_) {
    // when decoding fails just return false
    return false
  }
}

module.exports = Waylay
