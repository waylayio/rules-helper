'use strict'

const Resource = require('./resource')
const { getMime, isString, isBinary, isObject } = require('./util')

/**
 * @namespace Vault
 * @description Vault allows you to store encrypted data
 */
class Vault extends Resource {
  /**
   * Create a new vault entry
   * @param  {string} key
   * @param  {string|Object|Buffer|Uint8Array} data
   * @return {Promise}
   */
  set (key, data) {
    const validInput = isValidDataValue(data)
    if (!validInput) return Promise.reject(new TypeError(`unsupported data value, only strings buffers or plain objects are allowed, got "${typeof data}" instead.`))

    return this._request({
      method: 'PUT',
      headers: {
        'Content-Type': getMime(data)
      },
      path: `/vault/${key}`,
      data
    })
  }

  /**
   * Retrieve a vault entry
   * @param  {string} key
   * @return {Promise}
   */
  get (key) {
    return this._request({
      path: `/vault/${key}`
    })
  }

  /**
   * Remove a vault entry
   * @param  {string} key
   * @return {Promise}
   */
  remove (key) {
    return this._request({
      method: 'DELETE',
      path: `/vault/${key}`
    })
  }

  /**
   * List all of your keys
   * @return {Promise}
   */
  keys () {
    return this._request({
      path: '/vault'
    })
  }
}

function isValidDataValue (value) {
  return isString(value) || isObject(value) || isBinary(value)
}

module.exports = Vault
