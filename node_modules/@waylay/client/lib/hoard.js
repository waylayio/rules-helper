'use strict'

const Resource = require('./resource')

/**
 * @namespace Hoard
 */
class Hoard extends Resource {
  /**
   * Retrieve tokens for a provider
   * @param  {string} [provider=''] Optional provider to retrieve tokens for
   * @param  {Object} [options={}] Extra options
   * @param  {Object} [options.sub=''] The user ID you want to connect
   * @param  {Object} [options.scope=''] The scope of the authentication (personal or organisation)
   * @return {Promise<Object>} User tokens
   */
  getTokens (provider, options = {}) {
    const { sub, scope = 'personal' } = options
    return this._request({
      method: 'GET',
      path: `/tokens/${provider}`,
      params: { sub },
      headers: {
        'X-Waylay-Auth-Scope': scope
      }
    })
  }

  /**
   * Retrieve all tokens
   * @param  {object} [options={}] Hoard options
   * @param  {Object} [options.sub=''] The user ID you want to connect
   * @param  {Object} [options.scope=''] The scope of the authentication (personal or organisation)
   * @return {Promise<Object>} User tokens
   */
  getAllTokens (options = {}) {
    const { sub, scope = 'personal' } = options
    return this._request({
      method: 'GET',
      path: '/tokens',
      params: { sub },
      headers: {
        'X-Waylay-Auth-Scope': scope
      }
    })
  }

  /**
   * Retrieve an available provider
   * @param  {String} [provider=''] Optional single provider response
   * @param  {object} [options={}] Hoard options
   * @param  {Object} [options.sub=''] The user ID you want to connect
   * @param  {Object} [options.scope=''] The scope of the authentication (personal or organisation)
   * @return {Promise<Object>}      List of available providers to connect to
   */
  provider (provider, options = {}) {
    const { sub, scope = 'personal' } = options
    return this._request({
      method: 'GET',
      path: `/providers/${provider}`,
      params: { sub },
      headers: {
        'X-Waylay-Auth-Scope': scope
      }
    })
  }

  /**
   * Retrieve a list of all available providers
   * @param  {object} [options={}] Hoard options
   * @param  {Object} [options.sub=''] The user ID you want to connect
   * @param  {Object} [options.scope=''] The scope of the authentication (personal or organisation)
   * @return {Promise<Object>}      List of available providers to connect to
   */
  providers (options = {}) {
    const { sub, scope = 'personal' } = options
    return this._request({
      method: 'GET',
      path: '/providers',
      params: { sub },
      headers: {
        'X-Waylay-Auth-Scope': scope
      }
    })
  }

  /**
   * Remove all tokens for a provider/user
   * @param  {String} [provider=''] Provider to delete
   * @param  {object} [options={}] Hoard options
   * @param  {Object} [options.sub=''] The user ID you want to connect
   * @param  {Object} [options.scope=''] The scope of the authentication (personal or organisation)
   * @return {Promise<Object>}
   */
  remove (provider, options = {}) {
    const { sub, scope = 'personal' } = options
    return this._request({
      method: 'DELETE',
      path: `/tokens/${provider}`,
      params: { sub },
      headers: {
        'X-Waylay-Auth-Scope': scope
      }
    })
  }

  /**
   * Remove all tokens for a provider/user
   * @param  {object} [options={}] Hoard options
   * @param  {Object} [options.sub=''] The user ID you want to connect
   * @param  {Object} [options.scope=''] The scope of the authentication (personal or organisation)
   * @return {Promise<Object>}
   */
  removeAll (options = {}) {
    const { sub, scope = 'personal' } = options
    return this._request({
      method: 'DELETE',
      path: '/tokens',
      params: { sub },
      headers: {
        'X-Waylay-Auth-Scope': scope
      }
    })
  }
}

module.exports = Hoard
