'use strict'

const url = require('url')

const Resource = require('./resource')
const { wantsLatestVersion } = require('./util')

/**
 * @namespace Plugs
 */
class Plugs extends Resource {
  constructor (options, client, type) {
    super(options, client)
    this._type = type
  }

  /**
   * Execute one individual plug
   *
   * See {@link https://docs.waylay.io/#/api/rules/#execute-plug}
   *
   * @param  {string} name    The name of the plug to execute
   * @param  {string|'latest'} version The version on the plug to execute
   * @param  {Object} body    Data to send to the plug
   * @return {Promise<{ observedState: Object }>}
   */
  execute (name, version, body) {
    const path = wantsLatestVersion(version)
      ? `/api/${this._type}/${name}`
      : `/api/${this._type}/${name}/versions/${version}`

    return this._request({
      path,
      method: 'POST',
      data: body
    })
  }

  /**
   * List your plugs
   * @return {Promise<Plug[]>} A list of plugs
   */
  list (query = {}) {
    return this._request({
      ...this._getEndpoint(`/api/${this._type}`),
      params: query
    })
  }

  /**
   * Get details of one individual plug
   * @param  {string} name
   * @param  {string} version
   * @param  {Object} params
   * @return {Promise<Plug>}
   */
  get (name, version, params = {}) {
    let wantsLatest = wantsLatestVersion(version)

    // allows "get('name', { key: value })" function overloading
    if (typeof version === 'object') {
      params = version
      wantsLatest = true
    }

    const path = wantsLatest
      ? `/api/${this._type}/${name}`
      : `/api/${this._type}/${name}/versions/${version}`

    return this._request({ ...this._getEndpoint(path), params })
  }

  /**
   * Create a new plug
   *
   * @param  {Plug} plug The payload to create a new plug
   * @return {Promise<Plug>}
   */
  create (plug) {
    return this._request({
      ...this._getEndpoint(`/api/${this._type}`),
      method: 'POST',
      data: plug
    })
  }

  /**
   * Remove all versions of a plug
   *
   * @param  {string} name
   * @param  {boolean} force
   * @return {Promise}
   */
  remove (name, params) {
    return this._request({
      ...this._getEndpoint(`/api/${this._type}/${name}`),
      method: 'DELETE',
      params
    })
  }

  /**
   * Get the script of a plug
   * @param  {string} name The name of the plug
   * @param  {string} version The version of the plug
   * @return {Promise<Script>}
   */
  getScript (name, version) {
    return this._request(
      this._getEndpoint(`/api/${this._type}/${name}/versions/${version}/script`)
    )
  }

  /**
   * Get all versions of a plug
   * @param  {string} name The name of the plug
   * @param  {Object} params
   * @return {Promise<Array>} An array with every plug version
   */
  getVersions (name, params = {}) {
    return this._request({
      ...this._getEndpoint(`/api/${this._type}/${name}/versions`),
      params
    })
  }
  /**
 * Returns correct endpoint config:
 * url concatenated with path if registry url is configured otherwise just
 * default path
 * @param  {string} path
 * @return {Object}
 * @private
 */
  _getEndpoint (path) {
    const registryUrl = this._options.registry.baseUrl

    return registryUrl
      ? { url: url.resolve(registryUrl, path) }
      : { path }
  }
}

module.exports = Plugs
