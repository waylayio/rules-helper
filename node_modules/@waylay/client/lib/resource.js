'use strict'

const prependHttp = require('prepend-http')

class Resource {
  constructor (options, client) {
    this._client = client || options.client // default is for backward compatiblity with code that would directly call this constructor???
    this._options = options || {}
  }

  _request (options) {
    options = Object.assign({
      url: this.baseUrl + options.path
    }, options)

    return this._client._request(options)
  }

  get baseUrl () {
    const settingsKey = this._options.settingsBaseUrlKey

    // baseUrl has precedence over other configurations, even when it's undefined or ''
    const fromOptions = this._options.hasOwnProperty('baseUrl')
    if (fromOptions) {
      return this._options.baseUrl
        ? prependHttp(this._options.baseUrl, { https: true })
        : undefined
    }

    const fromGlobalSettings = settingsKey && this._client._settings && this._client._settings[settingsKey]
    const fromDefault = this._options.defaultBaseUrl
    const fromClient = this._client.baseUrl

    const baseUrl = fromGlobalSettings || fromDefault || fromClient

    return baseUrl !== 'https://' ? prependHttp(baseUrl, { https: true }) : ''
  }

  set baseUrl (baseUrl) {
    this._options.baseUrl = baseUrl
  }
}

module.exports = Resource
