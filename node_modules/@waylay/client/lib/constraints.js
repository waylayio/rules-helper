'use strict'

const Resource = require('./resource')
const { getBaseUrl, setBaseUrl } = require('./util/api-baseurl-fallback')

/**
 * @namespace Constraints
 */
class Constraints extends Resource {
  /**
   * baseUrl abstraction to make sure that this entity
   * first falls back to the api/engine config
   */
  get baseUrl () {
    return getBaseUrl.bind(this)()
  }

  set baseUrl (baseUrl) {
    return setBaseUrl.bind(this)(baseUrl)
  }

  /**
   * list all resource constraints
   * @param  {Object} params parameters to add to the query
   * @return {Promise}
   */
  list (params) {
    return this._request({
      path: `/api/resourceconstraints`,
      params
    })
  }

  /**
   * Get a resource constraint by id
   * @param  {string} id
   * @return {Promise}
   */
  get (id) {
    return this._request({
      path: `/api/resourceconstraints/${id}`
    })
  }

  /**
   * Add a resource constraint
   * @param  {Object} constraint
   * @param  {string} constraint.name
   * @param  {string} constraint.description
   * @param  {Array} constraint.attributes
   * @return {Promise}
   */
  create (constraint) {
    return this._request({
      path: `/api/resourceconstraints`,
      method: 'POST',
      data: constraint
    })
  }

  /**
   * Update a resource constraint
   * @param  {string} id
   * @param  {Object} constraint
   * @param  {string} constraint.name
   * @param  {string} constraint.description
   * @param  {Array} constraint.attributes
   * @return {Promise}
   */
  update (id, constraint) {
    return this._request({
      path: `/api/resourceconstraints/${id}`,
      method: 'PUT',
      data: constraint
    })
  }

  /**
   * Remove a resource constraint
   * @param  {string} id
   * @return {Promise}
   */
  remove (id) {
    return this._request({
      path: `/api/resourceconstraints/${id}`,
      method: 'DELETE'
    })
  }
}

module.exports = Constraints
