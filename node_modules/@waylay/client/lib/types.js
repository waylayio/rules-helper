'use strict'

const BatchResource = require('./resource.batch')
const batch = require('./types.batch')
const { getBaseUrl, setBaseUrl } = require('./util/api-baseurl-fallback')

/**
 * @namespace Types
 */
class Types extends BatchResource {
  constructor (options, client) {
    super(options, client)
    this.batch = batch.bind(this)()
  }

  /**
   * baseUrl abstraction to make sure that this entity
   * first falls back to the api/engine config
   */
  get baseUrl () {
    return getBaseUrl.bind(this)()
  }

  set baseUrl (baseUrl) {
    return setBaseUrl.bind(this)(baseUrl)
  }

  /**
   * Create a new resource type
   *
   * See {@link https://docs.waylay.io/#/api/rest/#create-resource-type}
   * @param  {Object} type
   * @param  {string} type.id The id of the resourceType
   * @param  {any} [type.any] Any metadata associated to the resourceType
   * @return {Promise<Object>}
   * @example await waylay.types.create({ id: 'testType', test: 123 })
   * @example // Response on resolve
   * {
   *   "statusCode": 201,
   *   "uri": "/api/resourcetypes/testType",
   *   "entity": {
   *     "id": "testType",
   *     "name": "testType",
   *     "test": 123
   *     "$constraints": [],
   *     "$bulkOperation": "64c759ea-02cd-44da-a7ea-0d8f242872bb"
   *   }
   * }
   */
  create (type) {
    return this._request({
      path: `/api/resourcetypes`,
      method: 'POST',
      data: type
    })
  }

  /**
   * Remove a resource type
   * @param  {string} The resourceTypeId
   * @return {Promise}
   * @example await waylay.types.remove('testType')
   */
  remove (id) {
    return this._request({
      path: `/api/resourcetypes/${id}`,
      method: 'DELETE'
    })
  }

  /**
   * Update a resource type
   * Does not keep the existing metadata fields, use `patch` to do partial update
   * @param  {string} id
   * @param  {Object} type
   * @return {Promise}
   * @example await waylay.types.update('testType', { name:'testType', test2: 456 })
   * @example // Response on resolve
   * {
   *   "id": "testType",
   *   "$constraints": [],
   *   "$bulkOperation": "be27101d-520e-4549-bfc6-6ec02ad07706",
   *   "test2": 456
   * }
   */
  update (id, type) {
    return this._request({
      path: `/api/resourcetypes/${id}`,
      method: 'PUT',
      data: type
    })
  }

  /**
   * Patch a resource
   * @param  {string} id ResourceType id
   * @param  {Object} data Data to patch the resource with
   * @return {Promise<Object>}
   * @example await waylay.types.patch('testType', { test3: 789 })
   * @example // Response on resolve
   * {
   *   "id": "testType",
   *   "$constraints": [],
   *   "$bulkOperation": "be27101d-520e-4549-bfc6-6ec02ad07706",
   *   "test2": 456,
   *   "test3": 789
   * }
   */
  patch (id, data) {
    return this._request({
      path: `/api/resourcetypes/${id}`,
      method: 'PATCH',
      data
    })
  }

  /**
   * list all resource types
   * @param  {Object} qs querystring Object
   * @param  {string} qs.filter Partial match on multiple fields
   * @param  {string} qs.id String match on id
   * @param  {string} qs.template Returns all resourceTypes that are associated with a template
   * @param  {string} qs.q Elasticsearch query string
   * @return {Promise<Object>}
   * @example await waylay.types.list({filter: "test"})
   * @example // Response on resolve
   * {
   * "values": [
   *   {
   *     "id": "testType",
   *     "$constraints": [],
   *     "test2": 456
   *   },{...},{...},{...},{...},{...},{...},{...},{...}
   * ],
   * "skip": 0,
   * "limit": 100,
   * "total": 9
   * }
   */
  list (qs) {
    return this._request({
      path: '/api/resourcetypes',
      params: qs
    })
  }

  /**
   * Get a specific resource type
   * @param  {string} id ResourceTypeId
   * @return {Promise<Object>}
   * @example await waylay.types.get('testType')
   * @example // Response on resolve
   * {
   *     "id": "testType",
   *     "$constraints": [],
   *     "test2": 456
   * }
   */
  get (id) {
    return this._request({
      path: `/api/resourcetypes/${id}`
    })
  }

  /**
   * Get the constraints of a specific resource type
   * @param  {string} id
   * @return {Promise<Object>}
   * @example await waylay.types.constraints('testType')
   * @example // Response on resolve
   * {
   *   "id": "merged",
   *   "name": "Constraints for resourceType 'ID: ResourceType(testType,None,None,None,None,None,None,None,Map(),Set(),None,Some({\"test2\":456})).id'",
   *   "description": "The reserved keywords as defined on docs as resource constraints",
   *   "attributes": [Array(16)]
   * }
   */
  constraints (id, options = {}) {
    return this._client._request({
      path: `/api/resourcetypes/${id}/constraints`,
      ...options
    })
  }

  /**
   * Revalidate the constraints of a specific resource type
   * @param  {string} id
   * @return {Promise<Object>}
   * @example await waylay.types.revalidate('testType')
   */
  revalidate (id) {
    return this._client._request({
      path: `/api/resourcetypes/${id}/revalidate`,
      method: 'POST'
    })
  }

  /**
   * Fetch resource type history
   *
   * See {@link https://docs.waylay.io/#/api/rules/#retrieve-resource-type-change-log} for more information
   * @param {string} id The resourceTypeId
   * @param {Object} query Specify optional pagination parameters.
   * @param {number} [query.limit=10] Maximum number of entries fetched
   * @param {number} [query.skip=0] Number of entries that will be skipped
   * @return {Promise<Object>}
   * @example await waylay.types.changelog('testType', {limit: 25})
   * @example // Response on resolve
   * {
   *   "values": [
   *     {
   *       "time": "2021-03-31T08:29:26.182Z",
   *       "resourceTypeId": "testType",
   *       "userId": "292ffd11-231a-4b70-9457-e48e61018f21",
   *       "change": "updated",
   *       "resourceType": {
   *         "id": "testType",
   *         "$constraints": [],
   *         "test2": 456
   *       }
   *     },{...},{...},{...}
   *   ],
   *   "skip": 0,
   *   "limit": 25,
   *   "total": 4
   * }
   */
  changelog (id, query = {}) {
    const params = Object.assign({
      limit: 10,
      skip: 0
    }, query)

    // Should merge options
    const options = {
      path: `/api/resourcetypes/${id}/changes`,
      headers: { 'Accept': 'application/vnd.waylay.paged+json' },
      params
    }

    return this._request(options)
  }
}

module.exports = Types
