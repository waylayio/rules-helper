/* eslint-env jest */

const Url = require('url')
const moxios = require('moxios')
const Waylay = require('../index')

const waylay = new Waylay({ token: 'a-test-token' })

beforeEach(() => moxios.install(waylay.httpClient))
afterEach(() => moxios.uninstall())

test('list', (done) => {
  waylay.byoml.list()

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'get' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'byoml.waylay.io',
      path: `/models`
    })
    done()
  })
})

test('get', (done) => {
  const modelName = 'test-model'
  waylay.byoml.get(modelName)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'get' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'byoml.waylay.io',
      path: `/models/${modelName}`
    })
    done()
  })
})

test('exampleInput', (done) => {
  const modelName = 'test-model'
  waylay.byoml.exampleInput(modelName)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'get' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'byoml.waylay.io',
      path: `/models/${modelName}/examples`
    })
    done()
  })
})

test('delete', (done) => {
  const modelName = 'test-model'
  waylay.byoml.remove(modelName)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'delete' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'byoml.waylay.io',
      path: `/models/${modelName}`
    })
    done()
  })
})

test('predict', (done) => {
  const modelName = 'test-model'
  const payload = { 'instances': [[1, 2, 3], [4, 5, 6]] }
  waylay.byoml.predict(modelName, payload)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'post' })
    expect(JSON.parse(config.data)).toMatchObject(payload)
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'byoml.waylay.io',
      path: `/models/${modelName}/predict`
    })
    done()
  })
})

test('regress', (done) => {
  const modelName = 'test-model'
  const payload = { 'instances': [[1, 2, 3], [4, 5, 6]] }
  waylay.byoml.regress(modelName, payload)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'post' })
    expect(JSON.parse(config.data)).toMatchObject(payload)
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'byoml.waylay.io',
      path: `/models/${modelName}/regress`
    })
    done()
  })
})

test('classify', (done) => {
  const modelName = 'test-model'
  const payload = { 'instances': [[1, 2, 3], [4, 5, 6]] }
  waylay.byoml.classify(modelName, payload)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'post' })
    expect(JSON.parse(config.data)).toMatchObject(payload)
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'byoml.waylay.io',
      path: `/models/${modelName}/classify`
    })
    done()
  })
})
