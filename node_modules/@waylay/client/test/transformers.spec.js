/* eslint-env jest */

const Url = require('url')
const Waylay = require('../index')
const moxios = require('moxios')

const waylay = new Waylay({
  token: 'a-test-token',
  domain: 'my-domain.waylay.io'
})

beforeEach(() => moxios.install(waylay.httpClient))
afterEach(() => moxios.uninstall())

test('execute', done => {
  const { name, version, body } = {
    name: 'my-webscript',
    version: '1.0.0',
    body: { data: '0xBABE' }
  }

  waylay.transformers.execute(name, version, body)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'post',
      data: JSON.stringify(body)
    })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: `/api/transformers/${name}/versions/${version}`
    })

    done()
  })
})

test('execute latest', done => {
  const { name, version, body } = {
    name: 'my-webscript',
    body: { data: '0xBABE' }
  }

  waylay.transformers.execute(name, version, body)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'post',
      data: JSON.stringify(body)
    })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: `/api/transformers/${name}`
    })

    done()
  })
})

test('list', done => {
  waylay.transformers.list()

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'get' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: '/api/transformers'
    })

    done()
  })
})

test('list', done => {
  waylay.transformers.list({ includeDeprecated: true })

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'get' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: '/api/transformers?includeDeprecated=true'
    })

    done()
  })
})

test('get', done => {
  const { name, version } = { name: 'my-script', version: '1.0.0' }
  waylay.transformers.get(name, version)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'get' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: `/api/transformers/${name}/versions/${version}`
    })

    done()
  })
})

test('get latest', done => {
  const { name, version } = { name: 'my-script', version: 'latest' }
  waylay.transformers.get(name, version)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'get' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: `/api/transformers/${name}`
    })

    done()
  })
})

test('get latest with params', done => {
  const { name } = { name: 'my-script' }
  waylay.transformers.get(name, { includeDeprecated: true })

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'get' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: `/api/transformers/${name}?includeDeprecated=true`
    })

    done()
  })
})

test('get version with params', done => {
  const { name, version } = { name: 'my-script', version: '1.0.0' }
  waylay.transformers.get(name, version, { includeDeprecated: true })

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'get' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: `/api/transformers/${name}/versions/1.0.0?includeDeprecated=true`
    })

    done()
  })
})

test('get versions with params', done => {
  const name = 'my-script'
  waylay.transformers.getVersions(name, { includeDeprecated: true })

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'get' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: `/api/transformers/${name}/versions?includeDeprecated=true`
    })

    done()
  })
})

test('create', done => {
  const script = { name: 'my-webscript' }

  waylay.transformers.create(script)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'post',
      data: JSON.stringify(script)
    })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: `/api/transformers`
    })

    done()
  })
})

test('remove', done => {
  const name = 'my-script'
  waylay.transformers.remove(name)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'delete' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: `/api/transformers/${name}`
    })

    done()
  })
})

test('remove force', done => {
  const name = 'my-script'
  waylay.transformers.remove(name, { force: true })

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'delete' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: `/api/transformers/${name}?force=true`
    })

    done()
  })
})

test('getScript', done => {
  const { name, version } = { name: 'optimus-prime', version: '1.0.0' }
  waylay.transformers.getScript(name, version)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'get' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: `/api/transformers/${name}/versions/${version}/script`
    })

    done()
  })
})

test('getVersions', done => {
  const name = 'megatron'
  waylay.transformers.getVersions(name)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'get' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: `/api/transformers/${name}/versions`
    })

    done()
  })
})

describe('_getEndpoint', () => {
  const registryBaseUrl = 'https://registry.waylay.io'

  test.each([
    ['foobar', `${registryBaseUrl}/foobar`],
    ['/foobar', `${registryBaseUrl}/foobar`],
    ['foobar/', `${registryBaseUrl}/foobar/`],
    ['foo/bar', `${registryBaseUrl}/foo/bar`]
  ])('with registry - %s', (path, expected) => {
    let waylay = new Waylay({
      registry: {
        baseUrl: registryBaseUrl
      }
    })

    const transformersEndpoint = waylay.transformers._getEndpoint(path)

    expect(transformersEndpoint).toHaveProperty('url', expected)
  })
})
