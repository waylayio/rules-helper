/* eslint-env jest */

const Url = require('url')
const moxios = require('moxios')
const values = require('object-values')
const jwt = require('jsonwebtoken')
const Waylay = require('../index')

// self signed token that only contains the `{ "domain": "automated-test.waylay.io" }` assertion
const AUTOMATED_TEST_TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkb21haW4iOiJhdXRvbWF0ZWQtdGVzdC53YXlsYXkuaW8ifQ.TY8NpK-sYMkMAw319UHDXCA-iKuNuP03iUvwnkARnzk'
const AUTOMATED_TEST_DOMAIN = 'automated-test.waylay.io'

const waylay = new Waylay({
  domain: 'my-domain.waylay.io'
})

beforeEach(() => moxios.install(waylay.httpClient))
afterEach(() => moxios.uninstall())

describe('Waylay', () => {
  test('without options', () => {
    expect(() => {
      const waylay = new Waylay() // eslint-disable-line
    }).not.toThrow()
  })

  test('with httpClient options', () => {
    const waylay = new Waylay({
      httpClient: { timeout: 100 } // 100ms http timeout
    })

    expect(waylay.httpClient.defaults.timeout).toBe(100)
  })

  test('with setDomain', () => {
    const waylay = new Waylay({ domain: 'bar.com.foo' })
    expect(waylay.domain).toBe('bar.com.foo')
    waylay.setDomain('foo.bar.com')
    expect(waylay.domain).toBe('foo.bar.com')
    waylay.domain = 'bar.com.foo'
    expect(waylay.domain).toBe('bar.com.foo')
    waylay.domain = null
    waylay.withSettings({ waylay_domain: 'com.foo.bar' })
    expect(waylay.domain).toBe('com.foo.bar')
    waylay.domain = null
    waylay.withSettings({ no_waylay_domain: 'com.foo.bar' })
    expect(waylay.domain).toBe('')
  })

  test('defaults are applied correctly', () => {
    const waylay = new Waylay({
      domain: 'test.waylay.io',
      resources: { baseUrl: undefined }
    })
    expect(waylay).toHaveProperty('resources.baseUrl', undefined)
  })

  test('overwrites are applied correctly', () => {
    const waylay = new Waylay({
      domain: 'test.waylay.io',
      alarms: { baseUrl: 'https://alarms-staging.waylay.io' }
    })
    expect(waylay).toHaveProperty('alarms.baseUrl', 'https://alarms-staging.waylay.io')
  })

  test('with token, use domain from token', () => {
    const otherDomain = 'https://other.waylay.io'
    const otherDomainToken = jwt.sign({ domain: otherDomain }, 'some-super-secret-key')
    const waylay = new Waylay({ token: otherDomainToken })
    expect(waylay).toHaveProperty('token', otherDomainToken)
    expect(waylay).toHaveProperty('domain', otherDomain)
  })

  test('with token, overwrite domain', () => {
    const otherDomain = 'https://other.waylay.io'
    const otherDomainToken = jwt.sign({ domain: otherDomain }, 'some-super-secret-key')
    const overwriteDomain = 'overwrite.waylay.io'
    const waylay = new Waylay({ token: otherDomainToken, domain: overwriteDomain })
    expect(waylay).toHaveProperty('token', otherDomainToken)
    expect(waylay).toHaveProperty('domain', otherDomain)
  })

  test('use token setter', () => {
    const otherDomain = 'https://other.waylay.io'
    const otherDomainToken = jwt.sign({ domain: otherDomain }, 'some-super-secret-key')
    const overwriteDomain = 'overwrite.waylay.io'
    const overwriteToken = jwt.sign({ domain: overwriteDomain }, 'some-super-secret-key')
    const waylay = new Waylay({ token: otherDomainToken })
    expect(waylay).toHaveProperty('token', otherDomainToken)
    expect(waylay).toHaveProperty('domain', otherDomain)
    waylay.token = overwriteToken
    expect(waylay).toHaveProperty('token', overwriteToken)
    expect(waylay).toHaveProperty('domain', overwriteDomain)
  })
})

describe('_request', () => {
  test('default settings', done => {
    const waylay = new Waylay({
      domain: 'my-domain.waylay.io'
    })

    waylay._request()

    moxios.wait(() => {
      const request = moxios.requests.mostRecent()

      expect(request.config).toMatchObject({ method: 'get' })
      expect(Url.parse(request.url)).toMatchObject({
        protocol: 'https:',
        hostname: 'my-domain.waylay.io',
        path: '/'
      })
      expect(request).toHaveProperty('headers.User-Agent', 'waylay-js')

      done()
    })
  })

  test('full response, has headers', done => {
    const waylay = new Waylay({
      domain: 'my-domain.waylay.io',
      fullResponse: true
    })

    expect(waylay.wantsFullResponse).toBe(true)

    const result = waylay._request()

    moxios.wait(() => {
      const request = moxios.requests.mostRecent()

      request.respondWith({
        status: 200,
        headers: { 'x-count': 10 }
      })

      result
        .then(res => expect(res.headers['x-count']).toBe(10))
        .then(_ => done())
    })
  })

  test('normal response, no headers', done => {
    const waylay = new Waylay({
      domain: 'my-domain.waylay.io'
    })

    expect(waylay.wantsFullResponse).toBe(false)

    const result = waylay._request()

    moxios.wait(() => {
      const request = moxios.requests.mostRecent()

      request.respondWith({
        status: 200,
        headers: { 'x-count': 10 },
        response: {}
      })

      result
        .then(res => expect(res).not.toHaveProperty('headers'))
        .then(_ => done())
    })
  })

  test('with client id and secret', done => {
    const waylay = new Waylay({
      domain: 'my-domain.waylay.io',
      clientID: 'abc123',
      secret: 'def456'
    })

    waylay._request()

    moxios.wait(() => {
      const request = moxios.requests.mostRecent()

      expect(request.config).toMatchObject({
        auth: { username: 'abc123', password: 'def456' }
      })
      expect(request.headers['Authorization']).toMatch('Basic ')

      done()
    })
  })

  test('with token authentication', done => {
    const waylay = new Waylay({
      domain: 'my-domain.waylay.io',
      token: 'abc123'
    })

    waylay._request()

    moxios.wait(() => {
      const request = moxios.requests.mostRecent()

      expect(request).toHaveProperty('headers.Authorization', 'Bearer abc123')

      done()
    })
  })

  test('with params arrary', done => {
    const waylay = new Waylay({
      domain: 'my-domain.waylay.io'
    })

    waylay._request({
      params: {
        id: 'array-params',
        param: ['foo', 'bar']
      }
    })

    moxios.wait(() => {
      const request = moxios.requests.mostRecent()

      expect(Url.parse(request.url)).toMatchObject({
        search: '?id=array-params&param=foo&param=bar'
      })

      done()
    })
  })

  test('HTTP status code error', done => {
    const waylay = new Waylay({ domain: 'x' })
    waylay.ping()
      .catch(err => {
        expect(err.config).toBeInstanceOf(Object)
        expect(err).toBeInstanceOf(Error)
        expect(err).toHaveProperty('response.data', 'oops')
        done()
      })

    moxios.wait(() => {
      moxios.requests
        .mostRecent()
        .respondWith({ status: 400, response: 'oops' })
    })
  })

  test('handle already encoded url', done => {
    const waylay = new Waylay()

    moxios.install(waylay.httpClient)

    waylay._request({ url: 'https://test.waylay.io/api/%2Ffoobar%2F' })

    moxios.wait(() => {
      const request = moxios.requests.mostRecent()
      expect(request.url).toBe('https://test.waylay.io/api/%2Ffoobar%2F')
      done()
    })
  })

  test('handle encoding of url', done => {
    const waylay = new Waylay()

    moxios.install(waylay.httpClient)

    waylay._request({ url: 'https://test.waylay.io/api/foobar%' })

    moxios.wait(() => {
      const request = moxios.requests.mostRecent()
      expect(request.url).toBe('https://test.waylay.io/api/foobar%25')
      done()
    })
  })

  test('do not throw when unable to decode', () => {
    const waylay = new Waylay() // eslint-disable-line

    expect(() => {
      waylay._request({ url: 'https://test.waylay.io/api/%' })
    }).not.toThrow()
  })
})

test('login', done => {
  const credentials = { username: 'my-username', password: 'super-secret' }

  const waylay = new Waylay({
    domain: 'my-domain.waylay.io'
  })

  waylay.login(...values(credentials)).then(() => {
    expect(waylay.token).toBe(AUTOMATED_TEST_TOKEN)
    // verify that we were able to decode the domain correctly from the token response
    expect(waylay.domain).toBe(AUTOMATED_TEST_DOMAIN)
    done()
  })

  moxios.wait(() => {
    const request = moxios.requests.mostRecent()

    expect(request.config).toMatchObject({
      method: 'post',
      data: JSON.stringify(Object.assign({ grant_type: 'password' }, credentials))
    })
    expect(Url.parse(request.url)).toMatchObject({
      protocol: 'https:',
      hostname: 'my-domain.waylay.io',
      path: '/api/auth/token'
    })

    /**
     * No here to wrap `access_token` in a `data` object since `login`
     * will destructure `data` from `response`
     */
    request.respondWith({
      status: 200,
      response: {
        access_token: AUTOMATED_TEST_TOKEN
      }
    })
  })
})

test('functions with custom api URL', done => {
  const waylay = new Waylay()
    .withSettings({ waylay_api: 'https://test.waylay.io' })
  moxios.install(waylay.httpClient)

  waylay.ping()
  waylay.login()
  waylay.me()

  moxios.wait(() => {
    const r1 = moxios.requests.at(0)
    expect(r1.url).toBe('https://test.waylay.io/api/ping')
    const r2 = moxios.requests.at(1)
    expect(r2.url).toBe('https://test.waylay.io/api/auth/token')
    const r3 = moxios.requests.at(2)
    expect(r3.url).toBe('https://test.waylay.io/api/auth/me')

    done()
  })
})

test('ping', done => {
  waylay.ping()

  moxios.wait(() => {
    const request = moxios.requests.mostRecent()

    expect(request.config).toMatchObject({ method: 'get' })
    expect(request.url).toBe('https://my-domain.waylay.io/api/ping')

    done()
  })
})

test('me', done => {
  waylay.me()

  moxios.wait(() => {
    const request = moxios.requests.mostRecent()

    expect(request.config).toMatchObject({ method: 'get' })
    expect(request.url).toBe('https://my-domain.waylay.io/api/auth/me')

    done()
  })
})

test('settings', done => {
  var waylay = new Waylay({ domain: 'my-domain.waylay.io' })

  waylay.settings().then(response => {
    expect(response.waylay_domain).toBe('my-domain.waylay.io')
    expect(waylay.domain).toBe('my-domain.waylay.io')
    expect(waylay).toHaveProperty('resources.baseUrl', 'https://my-domain.waylay.io')
    expect(waylay).toHaveProperty('data.baseUrl', 'https://data.waylay.io')
    done()
  })

  moxios.wait(() => {
    const request = moxios.requests.mostRecent()

    expect(request.config).toMatchObject({ method: 'get' })
    expect(request.url).toBe('https://my-domain.waylay.io/api/settings')
    request.respondWith({
      status: 200,
      response: {
        waylay_domain: 'my-domain.waylay.io',
        waylay_data: 'other-data.waylay.io'
      }
    })
  })
})

test('withSettings', () => {
  var waylay = new Waylay({ domain: 'my-domain.waylay.io' })

  expect(waylay.domain).toBe('my-domain.waylay.io')
  expect(waylay).toHaveProperty('resources.baseUrl', 'https://my-domain.waylay.io')
  expect(waylay).toHaveProperty('data.baseUrl', 'https://data.waylay.io')
  waylay.withSettings({
    waylay_domain: 'my-domain.waylay.io',
    waylay_data: 'other-data.waylay.io'
  })
  expect(waylay.domain).toBe('my-domain.waylay.io')
  expect(waylay).toHaveProperty('resources.baseUrl', 'https://my-domain.waylay.io')
  expect(waylay).toHaveProperty('data.baseUrl', 'https://other-data.waylay.io')
})

test('loadSettings', (done) => {
  new Waylay({ token: AUTOMATED_TEST_TOKEN }).loadSettings().then(waylay => {
    expect(waylay.domain).toBe(AUTOMATED_TEST_DOMAIN)
    expect(waylay).toHaveProperty('resources.baseUrl', `https://${AUTOMATED_TEST_DOMAIN}`)
    expect(waylay).toHaveProperty('data.baseUrl', 'http://localhost:5033')
    done()
  })
  moxios.wait(() => {
    const request = moxios.requests.mostRecent()
    expect(request.url).toBe(`https://${AUTOMATED_TEST_DOMAIN}/api/settings`)
    request.respondWith({
      status: 200,
      response: {
        waylay_data: 'http://localhost:5033'
      }
    })
  })
})

test('globalSetting options', () => {
  var waylay = new Waylay({
    globalSettings: {
      waylay_domain: 'my-domain.waylay.io',
      waylay_data: 'other-data.waylay.io'
    }
  })
  expect(waylay.domain).toBe('my-domain.waylay.io')
  expect(waylay).toHaveProperty('resources.baseUrl', 'https://my-domain.waylay.io')
  expect(waylay).toHaveProperty('data.baseUrl', 'https://other-data.waylay.io')
})

test('verifyInitialization', done => {
  const client = new Waylay({
    auth: { baseUrl: 'REACT_APP_WAYLAY_AUTH_URL' },
    data: { baseUrl: 'REACT_APP_WAYLAY_DATA_URL' },
    alarms: { baseUrl: 'REACT_APP_WAYLAY_ALARMS_URL' },
    webscripts: { baseUrl: 'REACT_APP_WAYLAY_WEBSCRIPTS_URL' },
    vault: { baseUrl: 'REACT_APP_WAYLAY_VAULT_URL' },
    token: AUTOMATED_TEST_TOKEN
  })

  expect(client.domain).toBe(AUTOMATED_TEST_DOMAIN)

  client.data.getSeries(null, null)
    .then(resp => {
      expect(resp).toBe('OK DATA')
    })
    .then(() => {
      return client.resources.get('dummy_id')
    })
    .then(resp => {
      expect(resp).toBe('OK RESOURCE')
    })
    .then(done)

  moxios.wait(() => {
    const request = moxios.requests.mostRecent()
    expect(request.url).toBe('https://REACT_APP_WAYLAY_DATA_URL/resources/null/series')
    request.respondWith({
      status: 200,
      response: 'OK DATA'
    })
    moxios.wait(() => {
      const request = moxios.requests.mostRecent()
      expect(request.url).toBe(`https://${AUTOMATED_TEST_DOMAIN}/api/resources/dummy_id`)
      request.respondWith({
        status: 200,
        response: 'OK RESOURCE'
      })
    })
  })
})
