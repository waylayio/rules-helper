/* eslint-env jest */

const moxios = require('moxios')
const prependHttp = require('prepend-http')
const Waylay = require('../index')

// self signed token that only contains the `{ "domain": "automated-test.waylay.io" }` assertion
const AUTOMATED_TEST_TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkb21haW4iOiJhdXRvbWF0ZWQtdGVzdC53YXlsYXkuaW8ifQ.TY8NpK-sYMkMAw319UHDXCA-iKuNuP03iUvwnkARnzk'
const AUTOMATED_TEST_DOMAIN = 'automated-test.waylay.io'

describe('domain and api endpoint configurations', () => {
  const OPTS_DOMAIN = '_domain'
  const OPTS_API = '_api_base_url'
  const GS_DOMAIN = '_gs_domain'
  const GS_API = '_gs_api'
  const TOKEN_DOMAIN = AUTOMATED_TEST_DOMAIN
  const domainOptions = { domain: OPTS_DOMAIN }
  const tokenOptions = { token: AUTOMATED_TEST_TOKEN }
  const apiOptions = { api: { baseUrl: OPTS_API } }
  const domainSettings = { globalSettings: { waylay_domain: GS_DOMAIN } }
  const apiSettings = { globalSettings: { waylay_api: GS_API } }
  const domainAndApiSettings = { globalSettings: Object.assign({}, domainSettings.globalSettings, apiSettings.globalSettings) }

  const FAILS_WHEN_SETTINGS_DOMAIN_DIFFERS = false
  const httpsFor = domain => prependHttp(domain, { https: true })

  // Tests all combinations of
  //   `domain`, `token`, `api.baseUrl`,
  //   `globalSettings.waylay_domain`,
  //   `globalSettings.waylay_api`
  // for their influence on the `domain`, and the base urls
  // used in default and specific Resource handlers on the API endpoint.
  const settingTests = [
    // // TEST CASE PARAMETERS FOR :
    // name, constructor options, expectedDomain, expectedBaseUrl, expectedResourceBaseUrl, failsIn$2$16)
    // best buy case
    [
      'best-buy', {
        domain: 'best-buy.waylay.io',
        token: AUTOMATED_TEST_TOKEN,
        globalSettings: { waylay_domain: 'best-buy.waylay.io' }
      },
      TOKEN_DOMAIN, httpsFor('best-buy.waylay.io'), httpsFor('best-buy.waylay.io'), true
    ],
    [
      'best-buy-with-waylay_api', {
        domain: 'best-buy_d.waylay.io',
        token: AUTOMATED_TEST_TOKEN,
        globalSettings: {
          waylay_domain: 'best-buy.waylay.io',
          waylay_api: 'best-buy-api.waylay.io'
        }
      },
      TOKEN_DOMAIN, httpsFor('best-buy-api.waylay.io'), httpsFor('best-buy-api.waylay.io'), false
    ],
    // no config
    ['no_config', {}, '', 'https://', ''],

    // one source
    ['domain', domainOptions,
      OPTS_DOMAIN, httpsFor(OPTS_DOMAIN), httpsFor(OPTS_DOMAIN)],
    ['token', tokenOptions,
      TOKEN_DOMAIN, httpsFor(TOKEN_DOMAIN), httpsFor(TOKEN_DOMAIN)],
    ['api', apiOptions,
      '', httpsFor(''), httpsFor(OPTS_API)],
    ['gsDomain', domainSettings,
      GS_DOMAIN, httpsFor(GS_DOMAIN), httpsFor(GS_DOMAIN)],
    ['gsApi', apiSettings,
      // // (waylay_api only used for api endpoint)
      // '', httpsFor(''), httpsFor(GS_API)],
      '', httpsFor(GS_API), httpsFor(GS_API)],

    // two sources
    ['domain_token', Object.assign({}, domainOptions, tokenOptions),
      TOKEN_DOMAIN, httpsFor(OPTS_DOMAIN), httpsFor(OPTS_DOMAIN)],
    ['domain_api', Object.assign({}, domainOptions, apiOptions),
      OPTS_DOMAIN, httpsFor(OPTS_DOMAIN), httpsFor(OPTS_API)],
    ['domain_gsDomain', Object.assign({}, domainOptions, domainSettings),
      OPTS_DOMAIN, httpsFor(OPTS_DOMAIN), httpsFor(OPTS_DOMAIN), true],
    ['domain_gsApi', Object.assign({}, domainOptions, apiSettings),
      // // (waylay_api only used for api endpoint)
      // OPTS_DOMAIN, httpsFor(OPTS_DOMAIN), httpsFor(GS_API)],
      OPTS_DOMAIN, httpsFor(GS_API), httpsFor(GS_API)],
    ['token_api', Object.assign({}, tokenOptions, apiOptions),
      TOKEN_DOMAIN, httpsFor(TOKEN_DOMAIN), httpsFor(OPTS_API)],
    ['token_gsDomain', Object.assign({}, tokenOptions, domainSettings),
      TOKEN_DOMAIN, httpsFor(GS_DOMAIN), httpsFor(GS_DOMAIN), true],
    ['token_gsApi', Object.assign({}, tokenOptions, apiSettings),
      // // (waylay_api only used for api endpoint)
      // TOKEN_DOMAIN, httpsFor(TOKEN_DOMAIN), httpsFor(GS_API)],
      TOKEN_DOMAIN, httpsFor(GS_API), httpsFor(GS_API)],
    ['api_gsDomain', Object.assign({}, apiOptions, domainSettings),
      GS_DOMAIN, httpsFor(GS_DOMAIN), httpsFor(OPTS_API), false],
    ['api_gsApi', Object.assign({}, apiOptions, apiSettings),
      // // (waylay_api only used for api endpoint)
      // '', httpsFor(''), httpsFor(OPTS_API)],
      '', httpsFor(GS_API), httpsFor(OPTS_API)],
    ['gsDomain_gsApi', domainAndApiSettings,
      // // (waylay_api only used for api endpoint)
      // GS_DOMAIN, httpsFor(GS_DOMAIN), httpsFor(GS_API)],
      GS_DOMAIN, httpsFor(GS_API), httpsFor(GS_API), false],

    // three sources
    ['domain_token_api', Object.assign({}, domainOptions, tokenOptions, apiOptions),
      TOKEN_DOMAIN, httpsFor(OPTS_DOMAIN), httpsFor(OPTS_API)],
    ['domain_token_gsDomain', Object.assign({}, domainOptions, tokenOptions, domainSettings),
      TOKEN_DOMAIN, httpsFor(OPTS_DOMAIN), httpsFor(OPTS_DOMAIN), true],
    ['domain_token_gsAPI', Object.assign({}, domainOptions, tokenOptions, apiSettings),
      // // (waylay_api only used for api endpoint)
      // TOKEN_DOMAIN, httpsFor(OPTS_DOMAIN), httpsFor(GS_API)],
      TOKEN_DOMAIN, httpsFor(GS_API), httpsFor(GS_API)],
    ['domain_api_gsDomain', Object.assign({}, domainOptions, apiOptions, domainSettings),
      OPTS_DOMAIN, httpsFor(OPTS_DOMAIN), httpsFor(OPTS_API), true],
    ['domain_api_gsAPI', Object.assign({}, domainOptions, apiOptions, apiSettings),
      // // (waylay_api only used for api endpoint)
      // OPTS_DOMAIN, httpsFor(OPTS_DOMAIN), httpsFor(OPTS_API)],
      OPTS_DOMAIN, httpsFor(GS_API), httpsFor(OPTS_API)],
    ['domain_gsDomain_gsApi', Object.assign({}, domainOptions, domainAndApiSettings),
      // // (waylay_api only used for api endpoint)
      // OPTS_DOMAIN, httpsFor(OPTS_DOMAIN), httpsFor(GS_API)],
      OPTS_DOMAIN, httpsFor(GS_API), httpsFor(GS_API), true],
    ['token_api_gsDomain', Object.assign({}, tokenOptions, apiOptions, domainSettings),
      TOKEN_DOMAIN, httpsFor(GS_DOMAIN), httpsFor(OPTS_API), true],
    ['token_api_gsAPI', Object.assign({}, tokenOptions, apiOptions, apiSettings),
      // // (waylay_api only used for api endpoint)
      // TOKEN_DOMAIN, httpsFor(TOKEN_DOMAIN), httpsFor(OPTS_API)],
      TOKEN_DOMAIN, httpsFor(GS_API), httpsFor(OPTS_API)],
    ['token_gsDomain_gsApi', Object.assign({}, tokenOptions, domainAndApiSettings),
      // // (waylay_api only used for api endpoint)
      // TOKEN_DOMAIN, httpsFor(GS_DOMAIN), httpsFor(GS_API)],
      TOKEN_DOMAIN, httpsFor(GS_API), httpsFor(GS_API), true],
    ['api_gsDomain_gsApi', Object.assign({}, apiOptions, domainAndApiSettings),
      // // (waylay_api only used for api endpoint)
      // GS_DOMAIN, httpsFor(GS_DOMAIN), httpsFor(GS_API)],
      GS_DOMAIN, httpsFor(GS_API), httpsFor(OPTS_API), false],

    // four sources
    ['domain_token_api_gsDomain', Object.assign({}, domainOptions, tokenOptions, apiOptions, domainSettings),
      TOKEN_DOMAIN, httpsFor(OPTS_DOMAIN), httpsFor(OPTS_API), true],
    ['domain_token_api_gsApi', Object.assign({}, domainOptions, tokenOptions, apiOptions, apiSettings),
      // // (waylay_api only used for api endpoint)
      // TOKEN_DOMAIN, httpsFor(OPTS_DOMAIN), httpsFor(OPTS_API)],
      TOKEN_DOMAIN, httpsFor(GS_API), httpsFor(OPTS_API)],
    ['domain_token_gsDomain_gsApi', Object.assign({}, domainOptions, tokenOptions, domainAndApiSettings),
      // // (waylay_api only used for api endpoint)
      // TOKEN_DOMAIN, httpsFor(OPTS_DOMAIN), httpsFor(GS_API)],
      TOKEN_DOMAIN, httpsFor(GS_API), httpsFor(GS_API), true],
    ['domain_api_gsDomain_gsApi', Object.assign({}, domainOptions, apiOptions, domainAndApiSettings),
      // // (waylay_api only used for api endpoint)
      // OPTS_DOMAIN, httpsFor(OPTS_DOMAIN), httpsFor(OPTS_API)],
      OPTS_DOMAIN, httpsFor(GS_API), httpsFor(OPTS_API), true],
    ['token_api_gsDomain_gsApi', Object.assign({}, tokenOptions, apiOptions, domainAndApiSettings),
      // // (waylay_api only used for api endpoint)
      // TOKEN_DOMAIN, httpsFor(GS_DOMAIN), httpsFor(OPTS_API)],
      TOKEN_DOMAIN, httpsFor(GS_API), httpsFor(OPTS_API), true],

    // all sources
    ['domain_token_api_gsDomain_gsApi', Object.assign({}, domainOptions, tokenOptions, apiOptions, domainAndApiSettings),
      // // (waylay_api only used for api endpoint)
      // TOKEN_DOMAIN, httpsFor(OPTS_DOMAIN), httpsFor(OPTS_API)],
      TOKEN_DOMAIN, httpsFor(GS_API), httpsFor(OPTS_API), true]

  ]

  settingTests.forEach(([name, options, expectedDomain, expectedBaseUrl, expectedResourceBaseUrl, failsIn$2$16 = false]) => {
    test(`CASE ${name}`, done => {
    // console.info(`CASE ${name}`, options, { expectedDomain, expectedBaseUrl, expectedResourceBaseUrl })
      if (failsIn$2$16 && FAILS_WHEN_SETTINGS_DOMAIN_DIFFERS) {
        expect(() => new Waylay(options)).toThrow()
        done()
      } else {
        const waylay = new Waylay(options)
        moxios.install(waylay.httpClient)

        expect(waylay).toHaveProperty('domain', expectedDomain)
        expect(waylay).toHaveProperty('baseUrl', expectedBaseUrl)
        expect(waylay).toHaveProperty('resources.baseUrl', expectedResourceBaseUrl)
        waylay._request()
        moxios.wait(() => {
          const request = moxios.requests.mostRecent()
          expect(request.url).toMatch(expectedBaseUrl)
          waylay.resources.get('abc')
          moxios.wait(() => {
            const request = moxios.requests.mostRecent()
            expect(request.url).toMatch(expectedResourceBaseUrl)
            moxios.uninstall()
            done()
          })
        })
      }
    })
  })
})
