/* eslint-env jest */

const Url = require('url')
const Waylay = require('../../index')
const moxios = require('moxios')

const waylay = new Waylay({ domain: 'my-domain.waylay.io' })
const host = 'accounts-api.waylay.io'

beforeEach(() => moxios.install(waylay.httpClient))
afterEach(() => moxios.uninstall())

test('list', done => {
  waylay.users.list()

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'get' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: host,
      path: '/users'
    })

    done()
  })
})

test('list with params', done => {
  const domain = 'list-tenant.waylay.io'

  waylay.users.list({ domain })

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'get',
      params: { domain }
    })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: host,
      path: `/users?domain=${domain}`
    })

    done()
  })
})

test('get', done => {
  const userId = '953562951413'

  waylay.users.get(userId)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'get' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: host,
      path: `/users/${userId}`
    })

    done()
  })
})

test('create', done => {
  const user = { email: 'treelon@tsla.com', password: 'teamtrees' }

  waylay.users.create(user)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'post',
      data: JSON.stringify(user)
    })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: host,
      path: '/users'
    })

    done()
  })
})

test('update', done => {
  const userId = 'lttstoredotcom'
  const user = { email: 'linus@ltt.tech', password: 'swacket' }

  waylay.users.update(userId, user)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'put',
      data: JSON.stringify(user)
    })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: host,
      path: `/users/${userId}`
    })

    done()
  })
})

test('delete', done => {
  const userId = 'subscribeToPewds'

  waylay.users.delete(userId)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'delete' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: host,
      path: `/users/${userId}`
    })

    done()
  })
})

test('addRole', done => {
  const userId = 'theySeeMeRollin'
  const roleId = 'theyHatin'

  waylay.users.addRole(userId, roleId)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'post',
      data: JSON.stringify({ userId })
    })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: host,
      path: `/roles/${roleId}/user`
    })

    done()
  })
})

test('addRole with tenant (predefined roles)', done => {
  const userId = 'some-user-id'
  const roleId = 'some-role-id'
  const tenantId = 'some-tenant-id'

  waylay.users.addRole(userId, roleId, tenantId)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'post',
      data: JSON.stringify({ userId, tenantId })
    })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: host,
      path: `/roles/${roleId}/user`
    })

    done()
  })
})

test('deleteRole', done => {
  const userId = 'kevinSpacey'
  const roleId = 'houseOfCards'

  waylay.users.removeRole(userId, roleId)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'delete' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: host,
      path: `/roles/${roleId}/user/${userId}`
    })

    done()
  })
})

test('deleteRole with tenant (predefined roles)', done => {
  const userId = 'some-user-id'
  const roleId = 'some-role-id'
  const tenantId = 'some-tenant-id'

  waylay.users.removeRole(userId, roleId, tenantId)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'delete' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: host,
      path: `/roles/${roleId}/user/${userId}?tenant=${tenantId}`
    })

    done()
  })
})

test('resetPassword', done => {
  const userId = 'i-forgot-my-password'

  waylay.users.resetPassword(userId)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'post',
      data: JSON.stringify({ userId })
    })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: host,
      path: `/password/forgot`
    })

    done()
  })
})
