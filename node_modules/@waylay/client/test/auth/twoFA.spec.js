/* eslint-env jest */

const Url = require('url')
const Waylay = require('../../index')
const moxios = require('moxios')

const waylay = new Waylay({ domain: 'my-domain.waylay.io' })
const host = 'accounts-api.waylay.io'

beforeEach(() => moxios.install(waylay.httpClient))
afterEach(() => moxios.uninstall())

describe('status', () => {
  test('without user or tenant', done => {
    waylay.twoFA.status()

    moxios.wait(() => {
      const { config, url } = moxios.requests.mostRecent()

      expect(config).toMatchObject({ method: 'get' })
      expect(Url.parse(url)).toMatchObject({
        protocol: 'https:',
        host: host,
        path: '/auth/2fa/status'
      })

      done()
    })
  })

  test('with user and tenant', done => {
    const userId = 'some-user'
    const tenantId = 'some-tenant'

    waylay.twoFA.status(userId, tenantId)

    moxios.wait(() => {
      const { config, url } = moxios.requests.mostRecent()

      expect(config).toMatchObject({ method: 'get' })
      expect(Url.parse(url)).toMatchObject({
        protocol: 'https:',
        host: host,
        path: `/auth/2fa/status?userId=${userId}&tenantId=${tenantId}`
      })

      done()
    })
  })

  test('with empty user and tenant', done => {
    const userId = ''
    const tenantId = ''

    waylay.twoFA.status(userId, tenantId)

    moxios.wait(() => {
      const { config, url } = moxios.requests.mostRecent()

      expect(config).toMatchObject({ method: 'get' })
      expect(Url.parse(url)).toMatchObject({
        protocol: 'https:',
        host: host,
        path: '/auth/2fa/status'
      })

      done()
    })
  })

  test('with undefined user and tenant', done => {
    const userId = undefined
    const tenantId = null

    waylay.twoFA.status(userId, tenantId)

    moxios.wait(() => {
      const { config, url } = moxios.requests.mostRecent()

      expect(config).toMatchObject({ method: 'get' })
      expect(Url.parse(url)).toMatchObject({
        protocol: 'https:',
        host: host,
        path: '/auth/2fa/status'
      })

      done()
    })
  })
})

test('enableTwoFAEnforcement', done => {
  const tenantId = 'some-tenant'

  waylay.twoFA.enableTwoFAEnforcement(tenantId)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'post',
      data: JSON.stringify({ state: true })
    })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: host,
      path: `/auth/2fa/${tenantId}/enforce`
    })

    done()
  })
})

test('disableTwoFAEnforcement', done => {
  const tenantId = 'some-tenant'

  waylay.twoFA.disableTwoFAEnforcement(tenantId)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'post',
      data: JSON.stringify({ state: false })
    })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: host,
      path: `/auth/2fa/${tenantId}/enforce`
    })

    done()
  })
})
