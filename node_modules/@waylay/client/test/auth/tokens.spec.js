/* eslint-env jest */
const Waylay = require('../../index')
const moxios = require('moxios')

// self signed token that has expired
const AUTOMATED_TEST_EXPIRED_TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkb21haW4iOiJhdXRvbWF0ZWQtdGVzdC53YXlsYXkuaW8iLCJpYXQiOjE2MTc3OTY4OTgsImV4cCI6MTYxNzc5Njk5OH0.RQaaWyDQ1vv6IiroDfYHWeBExP6LVabaApBf1EUtNPA'
const AUTOMATED_TEST_REFRESH_TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkb21haW4iOiJhdXRvbWF0ZWQtdGVzdC53YXlsYXkuaW8iLCJpYXQiOjE2MTc3OTcxMTZ9.V0CIRBE4TpaxeaD8gPFAeCTOoHDXbMb4eBOrWfy4bKY'

const spy = jest.fn()

const client = new Waylay({
  auth: { baseUrl: 'REACT_APP_WAYLAY_AUTH_URL', onTokenRefresh: spy },
  token: AUTOMATED_TEST_EXPIRED_TOKEN,
  refreshToken: AUTOMATED_TEST_REFRESH_TOKEN
})

beforeEach(() => moxios.install(client.httpClient))
afterEach(() => moxios.uninstall())

test('refresh', (done) => {
  client.tokens.refresh()
    .then(({ refresh_token: refreshToken, token }) => {
      expect(refreshToken).toBe('new-refresh-token')
      expect(token).toBe('new-token')
      done()
    })

  moxios.wait(() => {
    const request = moxios.requests.mostRecent()
    const { config, url } = request

    expect(url).toBe('https://REACT_APP_WAYLAY_AUTH_URL/tokens?grant_type=refresh_token')

    expect(config).toMatchObject({
      method: 'post',
      data: JSON.stringify({ token: AUTOMATED_TEST_REFRESH_TOKEN })
    })

    request.respondWith({
      status: 200,
      response: {
        token: 'new-token',
        refresh_token: 'new-refresh-token'
      }
    })
  })
})

test('refresh failed', (done) => {
  client.tokens.refresh()
    .catch(err => {
      expect(err.message).toBe('Request failed with status code 400')
      done()
    })

  moxios.wait(() => {
    const request = moxios.requests.mostRecent()
    const { config, url } = request

    expect(url).toBe('https://REACT_APP_WAYLAY_AUTH_URL/tokens?grant_type=refresh_token')

    expect(config).toMatchObject({
      method: 'post',
      data: JSON.stringify({ token: AUTOMATED_TEST_REFRESH_TOKEN })
    })

    request.respondWith({
      status: 400
    })
  })
})

test('refresh good callback', (done) => {
  client.tokens.refresh()
    .then(({ refresh_token: refreshToken, token }) => {
      expect(refreshToken).toBe('new-refresh-token')
      expect(token).toBe('new-token')
      expect(spy).toHaveBeenCalledWith(null, {
        token,
        refresh_token: refreshToken
      })
      done()
    })

  moxios.wait(() => {
    const request = moxios.requests.mostRecent()
    const { config, url } = request

    expect(url).toBe('https://REACT_APP_WAYLAY_AUTH_URL/tokens?grant_type=refresh_token')

    expect(config).toMatchObject({
      method: 'post',
      data: JSON.stringify({ token: AUTOMATED_TEST_REFRESH_TOKEN })
    })

    request.respondWith({
      status: 200,
      response: {
        token: 'new-token',
        refresh_token: 'new-refresh-token'
      }
    })
  })
})
