/* eslint-env jest */

const Url = require('url')
const Waylay = require('../../index')
const moxios = require('moxios')

const waylay = new Waylay({ domain: 'my-domain.waylay.io' })
const host = 'accounts-api.waylay.io'

beforeEach(() => moxios.install(waylay.httpClient))
afterEach(() => moxios.uninstall())

test('list', done => {
  waylay.roles.list()

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'get' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: host,
      path: '/roles'
    })

    done()
  })
})

test('list with opts', done => {
  const domain = 'list-tenant.waylay.io'

  waylay.roles.list({ domain })

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'get',
      params: { domain }
    })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: host,
      path: `/roles?domain=${domain}`
    })

    done()
  })
})

test('get', done => {
  const roleId = 'some-role-id'

  waylay.roles.get(roleId)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'get' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: host,
      path: `/roles/${roleId}`
    })

    done()
  })
})

test('create', done => {
  const role = { name: 'some-role' }

  waylay.roles.create(role)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'post',
      data: JSON.stringify(role)
    })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: host,
      path: '/roles'
    })

    done()
  })
})

test('update', done => {
  const roleId = 'some-role-id'
  const role = { description: 'some-role-description' }

  waylay.roles.update(roleId, role)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'put',
      data: JSON.stringify(role)
    })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: host,
      path: `/roles/${roleId}`
    })

    done()
  })
})

test('delete', done => {
  const roleId = 'some-role-id'

  waylay.roles.delete(roleId)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'delete' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: host,
      path: `/roles/${roleId}`
    })

    done()
  })
})

test('addPermission', done => {
  const roleId = 'some-role-id'
  const permissionId = 'some-permission-id'

  waylay.roles.addPermission(roleId, permissionId)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'post',
      data: JSON.stringify({ permissionId })
    })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: host,
      path: `/roles/${roleId}/permissions`
    })

    done()
  })
})

test('removePermission', done => {
  const roleId = 'some-role-id'
  const permissionId = 'some-permission-id'

  waylay.roles.removePermission(roleId, permissionId)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'delete' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: host,
      path: `/roles/${roleId}/permissions/${permissionId}`
    })

    done()
  })
})

test('addUser', done => {
  const roleId = 'some-role-id'
  const userId = 'some-user-id'

  waylay.roles.addUser(roleId, userId)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'post',
      data: JSON.stringify({ userId })
    })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: host,
      path: `/roles/${roleId}/user`
    })

    done()
  })
})

test('addUser with tenant (predefined roles)', done => {
  const roleId = 'some-role-id'
  const userId = 'some-user-id'
  const tenantId = 'some-tenant-id'

  waylay.roles.addUser(roleId, userId, tenantId)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'post',
      data: JSON.stringify({ userId, tenantId })
    })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: host,
      path: `/roles/${roleId}/user`
    })

    done()
  })
})

test('removeUser', done => {
  const roleId = 'some-role-id'
  const userId = 'some-user-id'

  waylay.roles.removeUser(roleId, userId)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'delete' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: host,
      path: `/roles/${roleId}/user/${userId}`
    })

    done()
  })
})

test('removeUser with tenant (predefined roles)', done => {
  const roleId = 'some-role-id'
  const userId = 'some-user-id'
  const tenantId = 'some-tenant-id'

  waylay.roles.removeUser(roleId, userId, tenantId)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'delete' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: host,
      path: `/roles/${roleId}/user/${userId}?tenant=${tenantId}`
    })

    done()
  })
})
