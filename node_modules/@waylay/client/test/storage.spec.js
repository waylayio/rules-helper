/* eslint-env jest */

const Url = require('url')
const Waylay = require('../index')
const moxios = require('moxios')

const waylay = new Waylay({ domain: 'my-domain.waylay.io' })
const host = 'storage.waylay.io'

beforeEach(() => moxios.install(waylay.httpClient))
afterEach(() => moxios.uninstall())

describe('storage.bucket', () => {
  test('list', done => {
    waylay.storage.bucket.list()
    moxios.wait(() => {
      const { config, url } = moxios.requests.mostRecent()
      expect(config).toMatchObject({ method: 'get' })
      expect(Url.parse(url)).toMatchObject({
        protocol: 'https:',
        host: host,
        path: '/bucket'
      })
      done()
    })
  })

  test('get', done => {
    waylay.storage.bucket.get('assets')
    moxios.wait(() => {
      const { config, url } = moxios.requests.mostRecent()
      expect(config).toMatchObject({ method: 'get' })
      expect(Url.parse(url)).toMatchObject({
        protocol: 'https:',
        host: host,
        path: '/bucket/assets'
      })
      done()
    })
  })
})

describe('storage.object', () => {
  test('list', done => {
    waylay.storage.object.list('assets')
    waylay.storage.object.list('assets', '')
    waylay.storage.object.list('assets', '////////////')
    waylay.storage.object.list('assets', 'my-folder/my-prefi')
    waylay.storage.object.list('assets', '/my-folder/my-prefi')
    waylay.storage.object.list('assets', '////my folder ðŸ˜Š/ has spaces /////')
    moxios.wait(() => {
      [0, 1, 2].map(idx => {
        const { config, url } = moxios.requests.at(idx)
        expect(config).toMatchObject({ method: 'get' })
        expect(Url.parse(url)).toMatchObject({
          protocol: 'https:',
          host: host,
          path: '/bucket/assets/'
        })
      });
      [3, 4].map(idx => {
        const { config, url } = moxios.requests.at(idx)
        expect(config).toMatchObject({ method: 'get' })
        expect(Url.parse(url)).toMatchObject({
          protocol: 'https:',
          host: host,
          path: '/bucket/assets/my-folder/my-prefi'
        })
      });
      [5].map(idx => {
        const { config, url } = moxios.requests.at(idx)
        expect(config).toMatchObject({ method: 'get' })
        expect(Url.parse(url)).toMatchObject({
          protocol: 'https:',
          host: host,
          path: '/bucket/assets/my%20folder%20%F0%9F%98%8A/%20has%20spaces%20/'
        })
      })
      done()
    })
  })

  test('get', done => {
    waylay.storage.object.get('assets', '/my-folder/my-prefix.txt')
    waylay.storage.object.get('assets', 'my-folder/my-prefix.txt')
    moxios.wait(() => {
      [0, 1].map(idx => {
        const { config, url } = moxios.requests.at(idx)
        expect(config).toMatchObject({ method: 'get' })
        expect(Url.parse(url)).toMatchObject({
          protocol: 'https:',
          host: host,
          path: '/bucket/assets/my-folder/my-prefix.txt?stat=true'
        })
      })
      done()
    })
  })

  test('signGet', done => {
    waylay.storage.object.signGet('assets', '/my-folder/my-prefix.txt')
    moxios.wait(() => {
      const { config, url } = moxios.requests.mostRecent()
      expect(config).toMatchObject({ method: 'get' })
      expect(Url.parse(url)).toMatchObject({
        protocol: 'https:',
        host: host,
        path: '/bucket/assets/my-folder/my-prefix.txt?sign=GET'
      })
      done()
    })
  })

  test('signPut', done => {
    waylay.storage.object.signPut('assets', '/my-folder/my-prefix.txt')
    moxios.wait(() => {
      const { config, url } = moxios.requests.mostRecent()
      expect(config).toMatchObject({ method: 'get' })
      expect(Url.parse(url)).toMatchObject({
        protocol: 'https:',
        host: host,
        path: '/bucket/assets/my-folder/my-prefix.txt?sign=PUT'
      })
      done()
    })
  })

  test('signPost', done => {
    waylay.storage.object.signPost('assets', '/my-folder/my-prefix.txt')
    waylay.storage.object.signPost('assets')
    moxios.wait(() => {
      let req1 = moxios.requests.at(0)
      expect(req1.config).toMatchObject({ method: 'get' })
      expect(Url.parse(req1.url)).toMatchObject({
        protocol: 'https:',
        host: host,
        path: '/bucket/assets/my-folder/my-prefix.txt?sign=POST'
      })
      let req2 = moxios.requests.at(1)
      expect(req2.config).toMatchObject({ method: 'get' })
      expect(Url.parse(req2.url)).toMatchObject({
        protocol: 'https:',
        host: host,
        path: '/bucket/assets/?sign=POST'
      })
      done()
    })
  })

  test('remove', done => {
    waylay.storage.object.remove('assets', '/my-folder/my-prefix.txt')
    moxios.wait(() => {
      const { config, url } = moxios.requests.mostRecent()
      expect(config).toMatchObject({ method: 'delete' })
      expect(Url.parse(url)).toMatchObject({
        protocol: 'https:',
        host: host,
        path: '/bucket/assets/my-folder/my-prefix.txt'
      })
      done()
    })
  })

  test('removeAll', done => {
    waylay.storage.object.removeAll('assets', 'my-folder/pre-')
    moxios.wait(() => {
      const { config, url } = moxios.requests.mostRecent()
      expect(config).toMatchObject({ method: 'delete' })
      expect(Url.parse(url)).toMatchObject({
        protocol: 'https:',
        host: host,
        path: '/bucket/assets/my-folder/pre-?recursive=true'
      })
      done()
    })
  })
})

describe('storage.folder', () => {
  test('list', done => {
    waylay.storage.folder.list('assets')
    waylay.storage.folder.list('assets', '')
    waylay.storage.folder.list('assets', '////////////')
    waylay.storage.folder.list('assets', 'my-folder')
    waylay.storage.folder.list('assets', '/my-folder/')
    waylay.storage.folder.list('assets', '////my folder ðŸ˜Š/ has spaces /////')
    moxios.wait(() => {
      [0, 1, 2].map(idx => {
        const { config, url } = moxios.requests.at(idx)
        expect(config).toMatchObject({ method: 'get' })
        expect(Url.parse(url)).toMatchObject({
          protocol: 'https:',
          host: host,
          path: '/bucket/assets/'
        })
      });
      [3, 4].map(idx => {
        const { config, url } = moxios.requests.at(idx)
        expect(config).toMatchObject({ method: 'get' })
        expect(Url.parse(url)).toMatchObject({
          protocol: 'https:',
          host: host,
          path: '/bucket/assets/my-folder/'
        })
      });
      [5].map(idx => {
        const { config, url } = moxios.requests.at(idx)
        expect(config).toMatchObject({ method: 'get' })
        expect(Url.parse(url)).toMatchObject({
          protocol: 'https:',
          host: host,
          path: '/bucket/assets/my%20folder%20%F0%9F%98%8A/%20has%20spaces%20/'
        })
      })
      done()
    })
  })

  test('get', done => {
    waylay.storage.folder.get('assets', '/my-folder')
    waylay.storage.folder.get('assets', 'my-folder/')
    moxios.wait(() => {
      [0, 1].map(idx => {
        const { config, url } = moxios.requests.at(idx)
        expect(config).toMatchObject({ method: 'get' })
        expect(Url.parse(url)).toMatchObject({
          protocol: 'https:',
          host: host,
          path: '/bucket/assets/my-folder/?stat=true'
        })
      })
      done()
    })
  })

  test('signPost', done => {
    waylay.storage.folder.signPost('assets', '/my-folder/')
    moxios.wait(() => {
      const { config, url } = moxios.requests.mostRecent()
      expect(config).toMatchObject({ method: 'get' })
      expect(Url.parse(url)).toMatchObject({
        protocol: 'https:',
        host: host,
        path: '/bucket/assets/my-folder/?sign=POST'
      })
      done()
    })
  })

  test('create', done => {
    waylay.storage.folder.create('assets', 'my-folder')
    moxios.wait(() => {
      const { config, url } = moxios.requests.mostRecent()
      expect(config).toMatchObject({ method: 'put' })
      expect(Url.parse(url)).toMatchObject({
        protocol: 'https:',
        host: host,
        path: '/bucket/assets/my-folder/'
      })
      done()
    })
  })

  test('remove', done => {
    waylay.storage.folder.remove('assets', 'my-folder')
    moxios.wait(() => {
      const { config, url } = moxios.requests.mostRecent()
      expect(config).toMatchObject({ method: 'delete' })
      expect(Url.parse(url)).toMatchObject({
        protocol: 'https:',
        host: host,
        path: '/bucket/assets/my-folder/'
      })
      done()
    })
  })

  test('removeAll', done => {
    waylay.storage.folder.removeAll('assets', 'my-folder')
    moxios.wait(() => {
      const { config, url } = moxios.requests.mostRecent()
      expect(config).toMatchObject({ method: 'delete' })
      expect(Url.parse(url)).toMatchObject({
        protocol: 'https:',
        host: host,
        path: '/bucket/assets/my-folder/?recursive=true'
      })
      done()
    })
  })
})

describe('storage.content', () => {
  test('get', done => {
    waylay.storage.content.get('assets', 'abc.txt').then(
      resp => expect(resp).toEqual('hello world')
    )
    moxios.wait(() => {
      let req = moxios.requests.mostRecent()
      expect(Url.parse(req.url)).toMatchObject({
        protocol: 'https:',
        host: host,
        path: '/bucket/assets/abc.txt?sign=GET'
      })
      req.respondWith({
        status: 200,
        response: {
          _links: { get_object: { href: 'https://object-storage/secret-link-to-abc.txt' } }
        }
      }).then(() => {
        let req = moxios.requests.mostRecent()
        expect(Url.parse(req.url)).toMatchObject({
          protocol: 'https:',
          host: 'object-storage',
          path: '/secret-link-to-abc.txt'
        })
        req.respondWith({
          status: 200, response: 'hello world'
        }).then(() => done())
      })
    })
  })

  test('get (full response)', done => {
    let waylayFullResponse = new Waylay({ domain: 'my-domain.waylay.io' })
    waylayFullResponse.wantsFullResponse = true
    waylayFullResponse.storage.content.get('assets', 'abc.txt').then(
      resp => {
        expect(resp.status).toEqual(200)
        expect(resp.data).toEqual('hello world')
      }
    )
    moxios.wait(() => {
      let req = moxios.requests.mostRecent()
      expect(Url.parse(req.url)).toMatchObject({
        protocol: 'https:',
        host: host,
        path: '/bucket/assets/abc.txt?sign=GET'
      })
      req.respondWith({
        status: 200,
        response: {
          _links: { get_object: { href: 'https://object-storage/secret-link-to-abc.txt' } }
        }
      }).then(() => {
        let req = moxios.requests.mostRecent()
        expect(Url.parse(req.url)).toMatchObject({
          protocol: 'https:',
          host: 'object-storage',
          path: '/secret-link-to-abc.txt'
        })
        req.respondWith({
          status: 200, response: 'hello world'
        }).then(() => done())
      })
    })
  })

  test('getSigned', done => {
    waylay.storage.content.getSigned({ href: 'https://object-storage/secret-link-to-abc.txt' }).then(
      resp => expect(resp).toEqual('hello world')
    )
    moxios.wait(() => {
      let req = moxios.requests.mostRecent()
      expect(Url.parse(req.url)).toMatchObject({
        protocol: 'https:',
        host: 'object-storage',
        path: '/secret-link-to-abc.txt'
      })
      req.respondWith({
        status: 200, response: 'hello world'
      }).then(() => done())
    })
  })

  test('put', done => {
    waylay.storage.content.put('assets', 'xxx/abc.txt', 'hello world').then(
      resp => expect(resp).toEqual('OK')
    )
    waylay.storage.content.put('assets', 'xxx/abc.txt', 'hello world', { content_type: 'text/plain' }).then(
      resp => expect(resp).toEqual('OK')
    )
    moxios.wait(() => {
      [0, 1].map(idx => {
        let req = moxios.requests.at(idx)
        expect(Url.parse(req.url)).toMatchObject({
          protocol: 'https:',
          host: host,
          path: idx === 0 ? '/bucket/assets/xxx/abc.txt?sign=PUT' : '/bucket/assets/xxx/abc.txt?content_type=text%2Fplain&sign=PUT'
        })
        req.respondWith({
          status: 200,
          response: {
            _links: { put_object: { href: 'https://object-storage/xxx/secret-link-to-abc.txt' } }
          }
        }).then(() => {
          let req = moxios.requests.mostRecent()
          expect(req.config.method).toEqual('put')
          expect(req.config.data).toEqual('hello world')
          if (idx === 1) {
            expect(req.config.headers).toHaveProperty('Content-Type', 'text/plain')
          }
          expect(Url.parse(req.url)).toMatchObject({
            protocol: 'https:',
            host: 'object-storage',
            path: '/xxx/secret-link-to-abc.txt'
          })
          req.respondWith({
            status: 200, response: 'OK'
          }).then(() => idx === 1 && done())
        })
      })
    })
  })

  test('putSigned', done => {
    waylay.storage.content.putSigned(
      { href: 'https://object-storage/secret-link-to-abc.txt' },
      'hello world'
    ).then(
      resp => expect(resp).toEqual('OK')
    )
    waylay.storage.content.putSigned(
      { href: 'https://object-storage/secret-link-to-abc.txt' },
      'hello world',
      { content_type: 'text/plain' }
    ).then(
      resp => expect(resp).toEqual('OK')
    )
    moxios.wait(() => {
      [0, 1].map(idx => {
        let req = moxios.requests.at(idx)
        expect(req.config.method).toEqual('put')
        expect(Url.parse(req.url)).toMatchObject({
          protocol: 'https:',
          host: 'object-storage',
          path: '/secret-link-to-abc.txt'
        })
        if (idx === 1) {
          expect(req.config.headers).toHaveProperty('Content-Type', 'text/plain')
        }
        req.respondWith({
          status: 200, response: 'OK'
        }).then(() => idx === 1 && done())
      })
    })
  })

  test('post', done => {
    waylay.storage.content.post('assets', 'xxx/abc.txt', 'hello world', { content_type: 'text/plain' }).then(
      resp => expect(resp).toEqual('OK')
    )
    waylay.storage.content.post('assets', 'xxx/abc.txt', 'hello world').then(
      resp => expect(resp).toEqual('OK')
    )
    moxios.wait(() => {
      [0, 1].map(idx => {
        let req = moxios.requests.at(idx)
        expect(req.config.method).toEqual('get')
        expect(Url.parse(req.url)).toMatchObject({
          protocol: 'https:',
          host: host,
          path: idx === 1 ? '/bucket/assets/xxx/abc.txt?sign=POST' : '/bucket/assets/xxx/abc.txt?content_type=text%2Fplain&sign=POST'
        })
        req.respondWith({
          status: 200,
          response: {
            _links: {
              post_object: {
                href: 'https://object-storage/',
                form_data: { key: 'xxx/yyy/abc.txt', secret: 'donttell' }
              }
            }
          }
        }).then(() => {
          let req = moxios.requests.at(2 + idx)
          expect(req.config.method).toEqual('post')
          if (idx === 0) {
            expect(req.config.data).toMatchObject({
              key: 'xxx/yyy/abc.txt',
              secret: 'donttell',
              'content-type': 'text/plain'
            })
          } else if (idx === 1) {
            expect(req.config.data).toMatchObject({
              key: 'xxx/yyy/abc.txt',
              secret: 'donttell'
            })
          }
          expect(req.config.data.getBuffer().toString()).toEqual(
            expect.stringContaining('hello world')
          )
          expect(Url.parse(req.url)).toMatchObject({
            protocol: 'https:',
            host: 'object-storage',
            path: '/'
          })
          req.respondWith({
            status: 200, response: 'OK'
          }).then(() => idx === 1 && done())
        })
      })
    })
  })

  test('postSigned', done => {
    waylay.storage.content.postSigned(
      { href: 'https://object-storage/', form_data: { key: 'xxx/yyy/', secret: 'donttell' } },
      'hello world',
      { content_type: 'text/plain', path: 'xxx/yyy/abc.txt' }
    ).then(
      resp => expect(resp).toEqual('OK')
    )
    waylay.storage.content.postSigned(
      { href: 'https://object-storage/', form_data: { key: 'xxx/yyy/', secret: 'donttell' } },
      'hello world'
    ).then(
      resp => expect(resp).toEqual('OK')
    )
    moxios.wait(() => {
      [0, 1].map(idx => {
        let req = moxios.requests.at(idx)
        expect(req.config.method).toEqual('post')
        if (idx === 0) {
          expect(req.config.data).toMatchObject({
            key: 'xxx/yyy/abc.txt',
            secret: 'donttell',
            'content-type': 'text/plain'
          })
        } else if (idx === 1) {
          expect(req.config.data).toMatchObject({
            key: 'xxx/yyy/',
            secret: 'donttell'
          })
        }
        expect(req.config.data.getBuffer().toString()).toEqual(
          expect.stringContaining('hello world')
        )
        req.respondWith({
          status: 200, response: 'OK'
        }).then(() => idx === 1 && done())
      })
    })
  })
})

const subscription002 = {
  id: 'sub_002',
  channel: { name: 'echo' },
  filters: [{ suffix: '.txt' }]
}

describe('storage.subscription', () => {
  test('list', done => {
    waylay.storage.subscription.list('assets')
    moxios.wait(() => {
      const { config, url } = moxios.requests.mostRecent()
      expect(config).toMatchObject({ method: 'get' })
      expect(Url.parse(url)).toMatchObject({
        protocol: 'https:',
        host: host,
        path: '/subscription/assets'
      })
      done()
    })
  })

  test('get', done => {
    waylay.storage.subscription.get('assets', 'sub_001')
    moxios.wait(() => {
      const { config, url } = moxios.requests.mostRecent()
      expect(config).toMatchObject({ method: 'get' })
      expect(Url.parse(url)).toMatchObject({
        protocol: 'https:',
        host: host,
        path: '/subscription/assets/sub_001'
      })
      done()
    })
  })

  test('create', done => {
    waylay.storage.subscription.create('assets', subscription002)
    moxios.wait(() => {
      const { config, url } = moxios.requests.mostRecent()
      expect(config).toMatchObject({
        method: 'post',
        data: JSON.stringify(subscription002)
      })
      expect(Url.parse(url)).toMatchObject({
        protocol: 'https:',
        host: host,
        path: '/subscription/assets'
      })
      done()
    })
  })

  test('replace', done => {
    waylay.storage.subscription.replace('assets', 'sub_002', subscription002)
    moxios.wait(() => {
      const { config, url } = moxios.requests.mostRecent()
      expect(config).toMatchObject({
        method: 'put',
        data: JSON.stringify(subscription002)
      })
      expect(Url.parse(url)).toMatchObject({
        protocol: 'https:',
        host: host,
        path: '/subscription/assets/sub_002'
      })
      done()
    })
  })

  test('remove', done => {
    waylay.storage.subscription.remove('assets', 'sub_002')
    moxios.wait(() => {
      const { config, url } = moxios.requests.mostRecent()
      expect(config).toMatchObject({ method: 'delete' })
      expect(Url.parse(url)).toMatchObject({
        protocol: 'https:',
        host: host,
        path: '/subscription/assets/sub_002'
      })
      done()
    })
  })

  test('removeAll', done => {
    waylay.storage.subscription.removeAll('assets')
    moxios.wait(() => {
      const { config, url } = moxios.requests.mostRecent()
      expect(config).toMatchObject({ method: 'delete' })
      expect(Url.parse(url)).toMatchObject({
        protocol: 'https:',
        host: host,
        path: '/subscription/assets'
      })
      done()
    })
  })
})
