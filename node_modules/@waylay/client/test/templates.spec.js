/* eslint-env jest */

const Url = require('url')
const moxios = require('moxios')
const Waylay = require('../index')
const qs = require('querystring')

const waylay = new Waylay({
  token: 'a-test-token',
  domain: 'my-domain.waylay.io'
})

beforeEach(() => moxios.install(waylay.httpClient))
afterEach(() => moxios.uninstall())

test('create template', done => {
  const template = { name: 'foo' }
  waylay.templates.create(template)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'post',
      data: JSON.stringify(template)
    })
    expect(Url.parse(url)).toMatchObject({
      path: '/api/templates'
    })

    done()
  })
})

test('create template with params', done => {
  const template = { name: 'foo' }
  const params = { failOnWarning: true }
  waylay.templates.create(template, params)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'post',
      data: JSON.stringify(template),
      params
    })
    expect(Url.parse(url)).toMatchObject({
      path: '/api/templates?failOnWarning=true'
    })

    done()
  })
})

test('update template', done => {
  const template = { name: 'foo' }
  waylay.templates.update('foo', template)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'put',
      data: JSON.stringify(template)
    })
    expect(Url.parse(url)).toMatchObject({
      path: '/api/templates/foo'
    })

    done()
  })
})

test('update template with params', done => {
  const template = { name: 'foo' }
  const params = { failOnWarning: true }
  waylay.templates.update('foo', template, params)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'put',
      data: JSON.stringify(template),
      params
    })
    expect(Url.parse(url)).toMatchObject({
      path: '/api/templates/foo?failOnWarning=true'
    })

    done()
  })
})

test('remove template', done => {
  waylay.templates.remove(123)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'delete' })
    expect(Url.parse(url)).toMatchObject({
      path: '/api/templates/123'
    })

    done()
  })
})

test('list without options', done => {
  waylay.templates.list()

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'get' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: `/api/templates`
    })

    done()
  })
})

test('list fuzzy search', done => {
  waylay.templates.list('test')

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'get' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: `/api/templates?${qs.stringify({ filter: 'test' })}`
    })

    done()
  })
})

test('list with options', done => {
  const filter = { filter: 'my-task', plugin: 'mySensor' }
  waylay.templates.list(filter)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'get' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: `/api/templates?${qs.stringify({
        filter: 'my-task',
        plugin: 'mySensor'
      })}`
    })

    done()
  })
})

test('list with params and options', done => {
  const startIndex = 5
  const hits = 15
  const params = { hits, startIndex }
  const options = {
    headers: { Accept: 'text/plain' }
  }

  waylay.templates.list(params, options)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'get' })
    expect(config.params).toMatchObject({ hits, startIndex })
    expect(config).toMatchObject(options)
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: `/api/templates?${qs.stringify({ hits, startIndex })}`
    })

    done()
  })
})

test('list with filter, params and options', done => {
  const filter = 'my-template'
  const startIndex = 5
  const hits = 15
  const params = { hits, startIndex }
  const options = {
    headers: { Accept: 'text/plain' }
  }

  waylay.templates.list(filter, params, options)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'get' })
    expect(config.params).toMatchObject({ hits, startIndex })
    expect(config).toMatchObject(options)
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: `/api/templates?${qs.stringify({ hits, startIndex, filter })}`
    })

    done()
  })
})

describe('get template', () => {
  test('get', done => {
    const name = 'my-template'
    waylay.templates.get(name)

    moxios.wait(() => {
      const { config, url } = moxios.requests.mostRecent()

      expect(config).toMatchObject({ method: 'get' })
      expect(Url.parse(url)).toMatchObject({
        protocol: 'https:',
        host: 'my-domain.waylay.io',
        path: `/api/templates/${name}`
      })

      done()
    })
  })

  test('get with params', done => {
    const name = 'my-template'
    waylay.templates.get(name, { format: 'simplified' })

    moxios.wait(() => {
      const { config, url } = moxios.requests.mostRecent()

      expect(config).toMatchObject({ method: 'get' })
      expect(Url.parse(url)).toMatchObject({
        protocol: 'https:',
        host: 'my-domain.waylay.io',
        path: `/api/templates/${name}?format=simplified`
      })

      done()
    })
  })

  test('get template variables', done => {
    const template = { name: 'foo' }
    waylay.templates.variables(template)

    moxios.wait(() => {
      const { config, url } = moxios.requests.mostRecent()

      expect(config).toMatchObject({
        method: 'post',
        data: JSON.stringify(template)
      })
      expect(Url.parse(url)).toMatchObject({
        path: '/api/variableDeclarations'
      })

      done()
    })
  })
})
