/* eslint-env jest */

const Url = require('url')
const moxios = require('moxios')
const Waylay = require('../index')

const waylay = new Waylay({
  token: 'a-test-token',
  domain: 'my-domain.waylay.io'
})

beforeEach(() => moxios.install(waylay.httpClient))
afterEach(() => moxios.uninstall())

test('baseUrl override options', () => {
  expect(new Waylay()).toHaveProperty('constraints.baseUrl', '')
  expect(new Waylay({ domain: 'myDomain' })).toHaveProperty('constraints.baseUrl', 'https://myDomain')
  expect(new Waylay({ constraints: { baseUrl: 'constraintsHost' } })).toHaveProperty('constraints.baseUrl', 'https://constraintsHost')
  expect(new Waylay({ api: { baseUrl: 'apiHost' } })).toHaveProperty('constraints.baseUrl', 'https://apiHost')
  expect(new Waylay({ globalSettings: { waylay_api: 'globalApi' } })).toHaveProperty('constraints.baseUrl', 'https://globalApi')
  var fullOpts = {
    constraints: { baseUrl: 'constraintsHost' },
    api: { baseUrl: 'apiHost' },
    domain: 'myDomain',
    globalSettings: {
      waylay_api: 'globalApi'
    }
  }
  expect(new Waylay(fullOpts)).toHaveProperty('constraints.baseUrl', 'https://constraintsHost')
  delete fullOpts.constraints
  expect(new Waylay(fullOpts)).toHaveProperty('constraints.baseUrl', 'https://apiHost')
  delete fullOpts.api
  expect(new Waylay(fullOpts)).toHaveProperty('constraints.baseUrl', 'https://globalApi')
  delete fullOpts.globalSettings.waylay_api
  expect(new Waylay(fullOpts)).toHaveProperty('constraints.baseUrl', 'https://myDomain')
  delete fullOpts.domain
  expect(new Waylay(fullOpts)).toHaveProperty('constraints.baseUrl', '')

  const waylay = new Waylay(fullOpts)
  waylay.constraints.baseUrl = 'xyz'
  expect(waylay).toHaveProperty('constraints.baseUrl', 'https://xyz')
})

test('list', (done) => {
  waylay.constraints.list()

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'get'
    })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: '/api/resourceconstraints'
    })

    done()
  })
})

test('list /w params', (done) => {
  waylay.constraints.list({ foo: 'bar' })

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'get'
    })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: '/api/resourceconstraints?foo=bar'
    })

    done()
  })
})

test('get', (done) => {
  const id = 'foobar'
  waylay.constraints.get(id)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'get'
    })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: `/api/resourceconstraints/${id}`
    })

    done()
  })
})

test('create', (done) => {
  const name = 'test'
  const description = 'test desc'
  const attributes = [{ test: 'test' }]
  waylay.constraints.create({ name, description, attributes })

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'post',
      data: JSON.stringify({ name, description, attributes })
    })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: '/api/resourceconstraints'
    })

    done()
  })
})

test('update', (done) => {
  const id = 'foobar'
  const name = 'test'
  const description = 'test desc'
  const attributes = [{ test: 'test' }]
  waylay.constraints.update(id, { name, description, attributes })

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'put',
      data: JSON.stringify({ name, description, attributes })
    })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: `/api/resourceconstraints/${id}`
    })

    done()
  })
})

test('remove', (done) => {
  const id = 'foobar'
  waylay.constraints.remove(id)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'delete'
    })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: `/api/resourceconstraints/${id}`
    })

    done()
  })
})
