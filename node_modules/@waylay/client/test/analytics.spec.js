/* eslint-env jest */

const Url = require('url')
const moxios = require('moxios')
const Waylay = require('../index')
const generateData = require('../lib/analytics').generateData

const waylay = new Waylay({
  token: 'a-test-token'
})

beforeEach(() => moxios.install(waylay.httpClient))
afterEach(() => moxios.uninstall())

test.each([
  ['foo', 'bar', null, { resource: 'foo', metric: 'bar' }],
  [null, 'bar', { resource: 'foo' }, { resource: 'foo', metric: 'bar' }],
  ['foo', null, { metric: 'bar' }, { resource: 'foo', metric: 'bar' }],
  [null, null, { resource: 'foo', metric: 'bar' }, { resource: 'foo', metric: 'bar' }],
  ['test', 'test2', { resource: 'foo', metric: 'bar' }, { resource: 'foo', metric: 'bar' }]
])('generateData(%s, %s, %o)', (resource, tsaConfig, data, expected) => {
  expect(generateData(resource, tsaConfig, data)).toEqual(expected)
})

test('fit without options', done => {
  const resource = 'foo'
  const tsaConfig = 'bar'
  const data = { }
  waylay.analytics.fit(resource, tsaConfig, data, false)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'post',
      data: JSON.stringify({ resource, metric: tsaConfig })
    })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'ts-analytics.waylay.io',
      path: `/fit`
    })

    done()
  })
})

test('fit with defaults', done => {
  const resource = 'foo'
  const metric = 'bar'
  waylay.analytics.fit(resource, metric)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'get',
      data: undefined
    })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'ts-analytics.waylay.io',
      path: `/fit/${resource}/${metric}`
    })

    done()
  })
})

test('anomaly with overriden options', done => {
  const resource = 'foo'
  const tsaConfig = 'bar'
  const data = {
    anomaly: {
      method: 'std',
      level: 3
    }
  }

  waylay.analytics.anomaly(resource, tsaConfig, data)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'post',
      data: JSON.stringify({
        anomaly: {
          method: 'std',
          level: 3
        }
      })
    })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'ts-analytics.waylay.io',
      path: `/anomaly/foo/bar`
    })

    done()
  })
})

test('anomaly without config', done => {
  const resource = 'foo'
  const tsaConfig = 'bar'
  const data = {
    anomaly: {
      method: 'std',
      level: 3
    }
  }

  waylay.analytics.anomaly(resource, tsaConfig, data, false)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'post',
      data: JSON.stringify({
        resource: 'foo',
        metric: 'bar',
        anomaly: {
          method: 'std',
          level: 3
        }
      })
    })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'ts-analytics.waylay.io',
      path: `/anomaly`
    })

    done()
  })
})

test('GET anomaly', done => {
  const resource = 'foo'
  const tsaConfig = 'bar'

  waylay.analytics.anomaly(resource, tsaConfig)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'get'
    })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'ts-analytics.waylay.io',
      path: `/anomaly/${resource}/${tsaConfig}`
    })

    done()
  })
})

test('anomaly without config run 1', done => {
  waylay.analytics.anomaly('foo1', 'bar1', undefined, false)
  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'post',
      data: JSON.stringify({
        resource: 'foo1',
        metric: 'bar1'
      })
    })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'ts-analytics.waylay.io',
      path: `/anomaly`
    })
    done()
  })
})

test('anomaly without config run 2', done => {
  waylay.analytics.anomaly('foo2', 'bar2', undefined, false)
  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'post',
      data: JSON.stringify({
        resource: 'foo2',
        metric: 'bar2'
      })
    })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'ts-analytics.waylay.io',
      path: `/anomaly`
    })
    done()
  })
})

test('predict with options', done => {
  const resource = 'foo'
  const tsaConfig = 'bar'
  const data = {
    predict: {
      until: 'P2D',
      alpha: 0.05
    }
  }

  waylay.analytics.predict(resource, tsaConfig, data)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'post',
      data: JSON.stringify({
        predict: {
          until: 'P2D',
          alpha: 0.05
        }
      })
    })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'ts-analytics.waylay.io',
      path: '/predict/foo/bar'
    })

    done()
  })
})

test('GET predict', done => {
  const resource = 'foo'
  const tsaConfig = 'bar'

  waylay.analytics.predict(resource, tsaConfig)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'get'
    })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'ts-analytics.waylay.io',
      path: `/predict/${resource}/${tsaConfig}`
    })

    done()
  })
})

test('predict without config', done => {
  const resource = 'foo'
  const tsaConfig = 'bar'
  const data = {
    anomaly: {
      method: 'std',
      level: 3
    }
  }

  waylay.analytics.predict(resource, tsaConfig, data, false)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'post',
      data: JSON.stringify({
        resource: 'foo',
        metric: 'bar',
        anomaly: {
          method: 'std',
          level: 3
        }
      })
    })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'ts-analytics.waylay.io',
      path: `/predict`
    })

    done()
  })
})

test('validate', done => {
  const resource = 'foo'
  const tsaConfig = 'bar'
  waylay.analytics.validate(resource, tsaConfig)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'get'
    })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'ts-analytics.waylay.io',
      path: `/validate/${resource}/${tsaConfig}`
    })

    done()
  })
})

test('GET config by name and resource', done => {
  const resource = 'foo'
  const configKey = 'bar'
  waylay.analytics.config(resource, configKey)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'get'
    })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'ts-analytics.waylay.io',
      path: `/config/${resource}/${configKey}`
    })

    done()
  })
})

test('config with missing input', () => {
  const noConfig = waylay.analytics.config('foo', undefined)
  const noResource = waylay.analytics.config(undefined, 'bar')

  return Promise.all([
    expect(noConfig).rejects.toThrowErrorMatchingSnapshot(),
    expect(noResource).rejects.toThrowErrorMatchingSnapshot()
  ])
})

test('invalid _usecase', () => {
  const noResource = waylay.analytics._usecase('fit', undefined)
  const noMetric = waylay.analytics._usecase('fit', 'foo')

  return Promise.all([
    expect(noResource).rejects.toThrowErrorMatchingSnapshot(),
    expect(noMetric).rejects.toThrowErrorMatchingSnapshot()
  ])
})

test('GET all config names', done => {
  const resource = 'foo'
  waylay.analytics.configs(resource)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'get'
    })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'ts-analytics.waylay.io',
      path: `/config/${resource}`
    })

    done()
  })
})

test('PUT config to resource', done => {
  const resource = 'foo'
  const configKey = 'bar'
  const configContent = {
    window: 'P1D'
  }
  waylay.analytics.replaceConfig(resource, configKey, configContent)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'put',
      data: JSON.stringify(configContent)
    })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'ts-analytics.waylay.io',
      path: `/config/${resource}/${configKey}`
    })

    done()
  })
})

test('PUT config to resource with invalid parameters', () => {
  const noResource = waylay.analytics.replaceConfig(undefined, 'config', {})
  const noMetric = waylay.analytics.replaceConfig('resource', undefined, {})
  const noConfig = waylay.analytics.replaceConfig('resource', 'config', undefined)

  return Promise.all([
    expect(noResource).rejects.toThrowErrorMatchingSnapshot(),
    expect(noMetric).rejects.toThrowErrorMatchingSnapshot(),
    expect(noConfig).rejects.toThrowErrorMatchingSnapshot()
  ])
})

test('PATCH config to resource', done => {
  const resource = 'foo'
  const configKey = 'bar'
  const configContent = {
    window: 'P1D'
  }
  waylay.analytics.updateConfig(resource, configKey, configContent)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'patch',
      data: JSON.stringify(configContent)
    })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'ts-analytics.waylay.io',
      path: `/config/${resource}/${configKey}`
    })

    done()
  })
})

test('PATCH config to resource with invalid parameters', () => {
  const noResource = waylay.analytics.updateConfig(undefined, 'config', {})
  const noMetric = waylay.analytics.updateConfig('resource', undefined, {})
  const noConfig = waylay.analytics.updateConfig('resource', 'config', undefined)

  return Promise.all([
    expect(noResource).rejects.toThrowErrorMatchingSnapshot(),
    expect(noMetric).rejects.toThrowErrorMatchingSnapshot(),
    expect(noConfig).rejects.toThrowErrorMatchingSnapshot()
  ])
})

test('POST config to resource', done => {
  const resource = 'foo'
  const name = 'config'
  const configContent = {
    metric: 'bar'
  }
  waylay.analytics.createConfig(resource, name, configContent)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'post',
      data: JSON.stringify({
        name: name,
        options: configContent
      })
    })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'ts-analytics.waylay.io',
      path: `/config/${resource}`
    })

    done()
  })
})

test('POST config to resource with invalid parameters', () => {
  const noResource = waylay.analytics.createConfig(undefined, 'config', {})
  const noMetric = waylay.analytics.createConfig('resource', undefined, {})
  const noConfig = waylay.analytics.createConfig('resource', 'config', undefined)

  return Promise.all([
    expect(noResource).rejects.toThrowErrorMatchingSnapshot(),
    expect(noMetric).rejects.toThrowErrorMatchingSnapshot(),
    expect(noConfig).rejects.toThrowErrorMatchingSnapshot()
  ])
})

test('DELETE config of resource', done => {
  const resource = 'foo'
  const configKey = 'bar'
  waylay.analytics.removeConfig(resource, configKey)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'delete'
    })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'ts-analytics.waylay.io',
      path: `/config/${resource}/${configKey}`
    })

    done()
  })
})

test('DELETE config of resource with invalid parameters', () => {
  const noResource = waylay.analytics.removeConfig(undefined, 'config')
  const noMetric = waylay.analytics.removeConfig('resource', undefined)

  return Promise.all([
    expect(noResource).rejects.toThrowErrorMatchingSnapshot(),
    expect(noMetric).rejects.toThrowErrorMatchingSnapshot()
  ])
})

test('use url params (get)', done => {
  waylay.analytics.anomaly('r', 'm', undefined, true, { api_version: '1.0.0', comment: 'a b c' })

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()
    expect(config).toMatchObject({
      method: 'get'
    })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'ts-analytics.waylay.io',
      path: '/anomaly/r/m?api_version=1.0.0&comment=a%20b%20c'
    })
    done()
  })
})

test('use url params (post)', done => {
  waylay.analytics.anomaly('r', 'm', undefined, false, { api_version: '1.0.0', comment: 'a b c' })

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()
    expect(config).toMatchObject({
      method: 'post'
    })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'ts-analytics.waylay.io',
      path: '/anomaly?api_version=1.0.0&comment=a%20b%20c'
    })
    done()
  })
})

test('GET query by name', done => {
  const queryName = 'queryName'
  waylay.analytics.getQuery(queryName)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'get'
    })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'ts-analytics.waylay.io',
      path: `/config/query/${queryName}`
    })

    done()
  })
})

test('GET query with missing input', () => {
  expect(() => waylay.analytics.getQuery(undefined)).toThrowErrorMatchingSnapshot()
})

test('DELETE query', done => {
  const queryName = 'queryName'
  waylay.analytics.removeQuery(queryName)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'delete'
    })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'ts-analytics.waylay.io',
      path: `/config/query/${queryName}`
    })

    done()
  })
})

test('DELETE query with invalid input', () => {
  expect(() => waylay.analytics.removeQuery(undefined)).toThrowErrorMatchingSnapshot()
})

test('PUT new query', done => {
  const queryName = 'foo'
  const query = {
    data: {}
  }
  waylay.analytics.createQuery(queryName, query)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'put',
      data: JSON.stringify({ query })
    })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'ts-analytics.waylay.io',
      path: `/config/query/${queryName}`
    })

    done()
  })
})

test('PUT query to resource with invalid parameters', () => {
  expect(() => waylay.analytics.createQuery(undefined, {})).toThrowErrorMatchingSnapshot()
  expect(() => waylay.analytics.createQuery('queryName', undefined)).toThrowErrorMatchingSnapshot()
})

test('PUT replace query', done => {
  const queryName = 'foo'
  const query = {
    data: {}
  }
  waylay.analytics.replaceQuery(queryName, query)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'put',
      data: JSON.stringify({ query })
    })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'ts-analytics.waylay.io',
      path: `/config/query/${queryName}`
    })

    done()
  })
})

test('PUT replace query to resource with invalid parameters', () => {
  expect(() => waylay.analytics.replaceQuery(undefined, {})).toThrowErrorMatchingSnapshot()
  expect(() => waylay.analytics.replaceQuery('queryName', undefined)).toThrowErrorMatchingSnapshot()
})

test('GET filtered queries', done => {
  const filter = 'name:queryName'
  const offset = 500
  const limit = 100
  waylay.analytics.getQueries({ filter, offset, limit })

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'get'
    })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'ts-analytics.waylay.io',
      path: `/config/query?q=name%3AqueryName&offset=${offset}&limit=${limit}`
    })

    done()
  })
})

test('GET filtered queries using defaults', done => {
  waylay.analytics.getQueries()

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'get'
    })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'ts-analytics.waylay.io',
      path: `/config/query?q=&offset=0&limit=100`
    })

    done()
  })
})

test('GET query data with options', done => {
  const queryName = 'foo'
  const options = {
    window: 'P1D'
  }
  waylay.analytics.getQueryData(queryName, options)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'get'
    })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'ts-analytics.waylay.io',
      path: `/data/query/${queryName}?render.mode=RENDER_MODE_SERIES&window=P1D`
    })

    done()
  })
})

test('GET query data without options', done => {
  const queryName = 'foo'
  waylay.analytics.getQueryData(queryName)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'get'
    })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'ts-analytics.waylay.io',
      path: `/data/query/${queryName}?render.mode=RENDER_MODE_SERIES`
    })

    done()
  })
})

test('GET query data with invalid input', () => {
  expect(() => waylay.analytics.getQueryData()).toThrowErrorMatchingSnapshot()
})
