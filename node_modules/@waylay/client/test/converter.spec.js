/* eslint-env jest */

const Url = require('url')
const moxios = require('moxios')
const Waylay = require('../index')

const waylay = new Waylay({ token: 'a-test-token' })

beforeEach(() => moxios.install(waylay.httpClient))
afterEach(() => moxios.uninstall())

test('getAll', (done) => {
  waylay.converter.getAll()

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'get' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'converter.waylay.io',
      path: `/converter/`
    })
    done()
  })
})

test('get', (done) => {
  const converterName = 'converterOne'
  waylay.converter.get(converterName)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'get' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'converter.waylay.io',
      path: `/converter/${converterName}`
    })
    done()
  })
})

test('create', (done) => {
  const converterName = 'converterOne'
  const type = 'velocity'
  const template = '{\n"metrics":[\n{\n"test": $util.renderValue($payload.google),\n"resource": "$payload.resource"\n}\n],\n"metadata":[]\n}'
  waylay.converter.create(converterName, type, template)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'put' })
    expect(JSON.parse(config.data)).toMatchObject({ type, template })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'converter.waylay.io',
      path: `/converter/${converterName}`
    })
    done()
  })
})

test('update', (done) => {
  const converterName = 'converterOne'
  const type = 'velocity'
  const template = '{\n"metrics":[\n{\n"test": $util.renderValue($payload.google),\n"resource": "$payload.resource"\n}\n],\n"metadata":[]\n}'
  waylay.converter.update(converterName, type, template)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'put' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'converter.waylay.io',
      path: `/converter/${converterName}`
    })
    done()
  })
})

test('delete', (done) => {
  const converterName = 'converterOne'
  waylay.converter.delete(converterName)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'delete' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'converter.waylay.io',
      path: `/converter/${converterName}`
    })
    done()
  })
})

test('convert', (done) => {
  const converterName = 'converterOne'
  const payload = { 'resource': 'pubsub-connector-resource', 'aws': 61 }
  waylay.converter.convert(converterName, payload, { forward: false })

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'post' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'converter.waylay.io',
      path: `/converter/${converterName}/convert?forward=false`
    })
    expect(config.data).toMatchSnapshot({ _boundary: expect.any(String), _streams: expect.any(Array) })
    expect(config.data._streams[1]).toMatchSnapshot()
    done()
  })
})

test('test', (done) => {
  const payload = { 'resource': 'pubsub-connector-resource', 'aws': 61 }
  const type = 'velocity'
  const template = '{\n"metrics":[\n{\n"test": $util.renderValue($payload.google),\n"resource": "$payload.resource"\n}\n],\n"metadata":[]\n}'
  waylay.converter.test(type, template, payload)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'post' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'converter.waylay.io',
      path: `/converter/test`
    })
    expect(config.data).toMatchSnapshot({ _boundary: expect.any(String), _streams: expect.any(Array) })
    expect(config.data._streams[1]).toMatchSnapshot()
    done()
  })
})
