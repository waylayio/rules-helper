/* eslint-env jest */

const Url = require('url')
const moxios = require('moxios')
const Waylay = require('../index')
const qs = require('querystring')

const waylay = new Waylay({ token: 'a-test-token' })

beforeEach(() => moxios.install(waylay.httpClient))
afterEach(() => moxios.uninstall())

test('getSeries', done => {
  const resource = 'my-resource'
  waylay.data.getSeries(resource)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'get' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'data.waylay.io',
      path: `/resources/${resource}/series`
    })

    done()
  })
})

test('getSeries for metadata', done => {
  const resource = 'my-resource'
  waylay.data.getSeries(resource, { metadata: '_' })

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'get' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'data.waylay.io',
      path: `/resources/${resource}/series?metadata=_`
    })

    done()
  })
})

test('getMessages', done => {
  const resource = 'my-resource'
  waylay.data.getMessages(resource)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'get' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'data.waylay.io',
      path: `/resources/${resource}/series`
    })

    done()
  })
})

test('postSeries', done => {
  const resource = 'my-resource'
  const message = { temperature: 21.5 }
  waylay.data.postSeries(resource, message)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'post' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'data.waylay.io',
      path: `/resources/${resource}`
    })

    done()
  })
})

test('deleteSeries', done => {
  const resource = 'my-resource'
  const metric = 'temperature'
  waylay.data.deleteSeries(resource, metric)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'delete' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'data.waylay.io',
      path: `/resources/${resource}?metrics=${metric}`
    })

    done()
  })
})

test('deleteSeries with array', done => {
  const resource = 'my-resource'
  const metric = ['temperature', 'humidity']
  waylay.data.deleteSeries(resource, metric)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'delete' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'data.waylay.io',
      path: `/resources/${resource}?metrics=${encodeURIComponent(metric.join(','))}`
    })

    done()
  })
})

test('postSeries with Object and params', done => {
  const message = { temperature: 21.5, resource: 'resource1' }
  waylay.data.postSeries(message, { ttl: 300 })

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'post', params: { ttl: 300 } })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'data.waylay.io',
      path: `/messages?ttl=300`,
      query: 'ttl=300'
    })

    done()
  })
})

test('postSeries with Array', done => {
  const message = [{
    temperature: 21.5,
    resource: 'resource1'
  }, {
    temperature: 22,
    resource: 'resource2'
  }]
  waylay.data.postSeries(message)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'post' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'data.waylay.io',
      path: `/messages`
    })

    done()
  })
})

test('postSeries with ttl', done => {
  const resource = 'my-resource'
  const message = { temperature: 21.5 }
  waylay.data.postSeries(resource, message, { ttl: 300 })

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'post', params: { ttl: 300 } })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'data.waylay.io',
      path: `/resources/${resource}?ttl=300`,
      query: 'ttl=300'
    })

    done()
  })
})

test('postMessage', done => {
  const resource = 'my-resource'
  const message = { temperature: 21.5 }
  waylay.data.postMessage(resource, message)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'post' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'data.waylay.io',
      path: `/resources/${resource}`
    })

    done()
  })
})

test('without options', done => {
  const resource = 'my-resource'
  const metric = 'temperature'
  waylay.data.getMetricSeries(resource, metric)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'get' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'data.waylay.io',
      path: `/resources/${resource}/series/${metric}?grouping=auto&aggregate=mean`
    })

    done()
  })
})

test('with options', done => {
  const resource = 'my-resource'
  const metric = 'temperature'
  const options = { grouping: 'hour', aggregate: 'sum' }
  waylay.data.getMetricSeries(resource, metric, options)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'get' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'data.waylay.io',
      path: `/resources/${resource}/series/${metric}?${qs.stringify(options)}`
    })

    done()
  })
})

test('with no aggregation', done => {
  const resource = 'my-resource'
  const metric = 'temperature'
  const options = { aggregate: 'none' }
  waylay.data.getMetricSeries(resource, metric, options)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'get' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'data.waylay.io',
      path: `/resources/${resource}/series/${metric}`
    })

    done()
  })
})

test('Last data points test', done => {
  const resource = 'my-resource'
  const metric = 'temperature'
  const options = { limit: 100 }
  waylay.data.getLastDatapointsForMetric(resource, metric, options)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'get' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'data.waylay.io',
      path: `/resources/${resource}/series/${metric}/last?${qs.stringify(options)}`
    })

    done()
  })
})

test('Last data points raw test', done => {
  const resource = 'my-resource'
  const metric = 'temperature'
  const options = { limit: 100 }
  waylay.data.getDatapointsForMetricRaw(resource, metric, options)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'get' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'data.waylay.io',
      path: `/resources/${resource}/series/${metric}/raw?${qs.stringify(options)}`
    })

    done()
  })
})

test('queryTimeSeries', done => {
  const timeSeriesQuery = {
    resources: ['temp-sensor-a', 'temp-sensor-b'],
    metric: 'temperature',
    from: '1977-07-22T15:30:00Z',
    window: 'P1D',
    grouping: 'PT10M',
    aggregates: ['min', 'max', 'mean']
  }
  waylay.data.queryTimeSeries(timeSeriesQuery)
  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()
    expect(config).toMatchObject({ method: 'post' })
    expect(JSON.parse(config.data)).toEqual(timeSeriesQuery)
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'data.waylay.io',
      path: '/series/query'
    })
    done()
  })
})

test('queryMessages', done => {
  const query = {
    resources: ['abc123', 'def456'],
    from: 1572271520198,
    until: 1590745888140,
    limit: 5
  }

  waylay.data.queryMessages(query)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'post' })
    expect(JSON.parse(config.data)).toEqual(query)

    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'data.waylay.io',
      path: '/messages/query'
    })
    done()
  })
})

test('getLastMetric', done => {
  const resource = 'my-resource'
  const metric = 'temperature'
  waylay.data.getLastMetric(resource, metric)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'get' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'data.waylay.io',
      path: `/resources/${resource}/series/${metric}/latest`
    })

    done()
  })
})

test('getLatestDocument', done => {
  const resource = 'my-resource'
  waylay.data.getLatestDocument(resource)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'get' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'data.waylay.io',
      path: `/resources/${resource}/current`
    })

    done()
  })
})

test('getLatestMessages', done => {
  const resource = 'my-resource'
  waylay.data.getLatestMessages(resource)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'get' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'data.waylay.io',
      path: `/resources/${resource}/messages`
    })

    done()
  })
})

test('getLatestMessages with filter', done => {
  const resource = 'my-resource'
  const spy = jest.fn()

  waylay.data.getLatestMessages(resource, { limit: 5 }).then(spy)

  moxios.wait(() => {
    const request = moxios.requests.mostRecent()

    request.respondWith({
      status: 200,
      response: {
        query: {
          resources: ['foo'],
          limit: 1
        },
        results: [{
          resource: 'foo',
          messages: [{
            temperature: 20,
            timestamp: 1596792980000
          }]
        }]
      }
    }).then(() => {
      expect(spy).toHaveBeenCalledWith([{
        temperature: 20,
        timestamp: 1596792980000
      }])

      done()
    })

    expect(request.config).toMatchObject({ method: 'post' })
    expect(Url.parse(request.url)).toMatchObject({
      protocol: 'https:',
      host: 'data.waylay.io',
      path: `/messages/query`
    })
  })
})

test('getLatestMessages with filter and empty response', done => {
  const resource = 'my-resource'
  const spy = jest.fn()

  waylay.data.getLatestMessages(resource, { limit: 5 }).then(spy)

  moxios.wait(() => {
    const request = moxios.requests.mostRecent()

    request.respondWith({
      status: 200,
      response: {
        query: {
          resources: ['foo'],
          limit: 1
        },
        results: []
      }
    }).then(() => {
      expect(spy).toHaveBeenCalledWith([])
      done()
    })

    expect(request.config).toMatchObject({ method: 'post' })
    expect(Url.parse(request.url)).toMatchObject({
      protocol: 'https:',
      host: 'data.waylay.io',
      path: `/messages/query`
    })
  })
})

test('remove', done => {
  const resource = 'my-resource'
  waylay.data.remove(resource)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'delete' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'data.waylay.io',
      path: `/resources/${resource}`
    })

    done()
  })
})
