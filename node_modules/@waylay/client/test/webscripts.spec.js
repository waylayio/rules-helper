/* eslint-env jest */

const Url = require('url')
const Waylay = require('../index')
const moxios = require('moxios')

describe.each([
  ['base functions', undefined],
  ['with registry', 'the-registry.waylay.io']
])('%s', (_, registryHost) => {
  const webscriptsBaseUrl = 'webscripts.waylay.io'

  const waylay = new Waylay({
    token: 'a-test-token',
    domain: 'my-domain.waylay.io',
    webscripts: {
      baseUrl: webscriptsBaseUrl
    },
    registry: {
      baseUrl: registryHost ? `https://${registryHost}` : undefined
    }
  })

  const expectedHost = registryHost || webscriptsBaseUrl

  beforeEach(() => moxios.install(waylay.httpClient))
  afterEach(() => moxios.uninstall())

  test('call', done => {
    const { tenant, name, version, body } = {
      tenant: 'some-tenant',
      name: 'my-webscript',
      version: '1.0.0',
      body: { foo: 'bar' }
    }

    waylay.webscripts.call(tenant, name, version, body)

    moxios.wait(() => {
      const { config, url } = moxios.requests.mostRecent()

      expect(config).toMatchObject({
        method: 'post',
        headers: {
          'X-Webscript-Version': '1.0.0'
        },
        data: JSON.stringify(body)
      })
      expect(Url.parse(url)).toMatchObject({
        protocol: 'https:',
        host: webscriptsBaseUrl,
        path: `/api/v1/${tenant}/${name}`
      })

      done()
    })
  })

  test('call latest', done => {
    const { tenant, name, version, body } = {
      tenant: 'some-tenant',
      name: 'my-webscript',
      body: { foo: 'bar' }
    }

    waylay.webscripts.call(tenant, name, version, body)

    moxios.wait(() => {
      const { config, url } = moxios.requests.mostRecent()

      expect(config).toMatchObject({
        method: 'post',
        data: JSON.stringify(body)
      })
      expect(Url.parse(url)).toMatchObject({
        protocol: 'https:',
        host: webscriptsBaseUrl,
        path: `/api/v1/${tenant}/${name}`
      })

      done()
    })
  })

  test('create', done => {
    const webscript = { name: 'my-webscript' }
    waylay.webscripts.create(webscript)

    moxios.wait(() => {
      const { config, url } = moxios.requests.mostRecent()

      expect(config).toMatchObject({
        method: 'post',
        data: JSON.stringify(webscript)
      })
      expect(Url.parse(url)).toMatchObject({
        protocol: 'https:',
        host: expectedHost,
        path: '/api/v1/webscripts'
      })

      done()
    })
  })

  test('remove', done => {
    const name = 'my-webscript'
    waylay.webscripts.remove(name)

    moxios.wait(() => {
      const { config, url } = moxios.requests.mostRecent()

      expect(config).toMatchObject({ method: 'delete' })
      expect(Url.parse(url)).toMatchObject({
        protocol: 'https:',
        host: expectedHost,
        path: `/api/v1/webscripts/${name}`
      })

      done()
    })
  })

  test('get with version', done => {
    const { name, version } = { name: 'my-webscript', version: '1.0.0' }
    waylay.webscripts.get(name, version)

    moxios.wait(() => {
      const { config, url } = moxios.requests.mostRecent()

      expect(config).toMatchObject({ method: 'get' })
      expect(config).toHaveProperty('headers.X-Webscript-Version', '1.0.0')
      expect(Url.parse(url)).toMatchObject({
        protocol: 'https:',
        host: expectedHost,
        path: `/api/v1/webscripts/${name}`
      })

      done()
    })
  })

  test('get without version', done => {
    const name = 'my-webscript'
    waylay.webscripts.get(name)

    moxios.wait(() => {
      const { config, url } = moxios.requests.mostRecent()

      expect(config).toMatchObject({ method: 'get' })
      expect(config).not.toHaveProperty('headers.X-Webscript-Version')
      expect(Url.parse(url)).toMatchObject({
        protocol: 'https:',
        host: expectedHost,
        path: `/api/v1/webscripts/${name}`
      })

      done()
    })
  })

  test('get latest', done => {
    const { name, version } = { name: 'my-webscript', version: '*' }
    waylay.webscripts.get(name, version)

    moxios.wait(() => {
      const { config, url } = moxios.requests.mostRecent()

      expect(config).toMatchObject({ method: 'get' })
      expect(config).not.toHaveProperty('headers.X-Webscript-Version')
      expect(Url.parse(url)).toMatchObject({
        protocol: 'https:',
        host: expectedHost,
        path: `/api/v1/webscripts/${name}`
      })

      done()
    })
  })

  test('list', done => {
    waylay.webscripts.list()

    moxios.wait(() => {
      const { config, url } = moxios.requests.mostRecent()

      expect(config).toMatchObject({ method: 'get' })
      expect(Url.parse(url)).toMatchObject({
        protocol: 'https:',
        host: expectedHost,
        path: `/api/v1/webscripts`
      })

      done()
    })
  })

  test('log', done => {
    const { name, version } = { name: 'my-webscript', version: '1.0.0' }
    waylay.webscripts.log(name, version)

    moxios.wait(() => {
      const { config, url } = moxios.requests.mostRecent()

      expect(config).toMatchObject({
        method: 'get',
        headers: { 'X-Webscript-Version': '1.0.0' }
      })
      expect(Url.parse(url)).toMatchObject({
        protocol: 'https:',
        host: expectedHost,
        path: `/api/v1/webscripts/logs/${name}`
      })

      done()
    })
  })

  test('log latest', done => {
    const { name, version } = { name: 'my-webscript' }
    waylay.webscripts.log(name, version)

    moxios.wait(() => {
      const { config, url } = moxios.requests.mostRecent()

      expect(config).toMatchObject({ method: 'get' })
      expect(Url.parse(url)).toMatchObject({
        protocol: 'https:',
        host: expectedHost,
        path: `/api/v1/webscripts/logs/${name}`
      })

      done()
    })
  })

  test('operation', done => {
    const name = 'operations/foo'
    waylay.webscripts.operation(name)

    moxios.wait(() => {
      const { config, url } = moxios.requests.mostRecent()

      expect(config).toMatchObject({ method: 'get' })
      expect(Url.parse(url)).toMatchObject({
        protocol: 'https:',
        host: expectedHost,
        path: `/api/v1/webscripts/${name}`
      })

      done()
    })
  })

  test('update', done => {
    const name = 'operations/foo'
    const plug = { name: 'my-webscripts' }
    waylay.webscripts.update(name, plug)

    moxios.wait(() => {
      const { config, url } = moxios.requests.mostRecent()

      expect(config).toMatchObject({ method: 'put' })
      expect(Url.parse(url)).toMatchObject({
        protocol: 'https:',
        host: expectedHost,
        path: `/api/v1/webscripts/${name}`
      })

      done()
    })
  })

  describe('exists', () => {
    test('webscript does exist', async (done) => {
      const name = 'my-webscript'
      const resp = waylay.webscripts.exists(name)

      moxios.wait(async () => {
        const request = moxios.requests.mostRecent()

        expect(request.config).toMatchObject({ method: 'head' })
        expect(Url.parse(request.url)).toMatchObject({
          protocol: 'https:',
          host: expectedHost,
          path: `/api/v1/webscripts/${name}`
        })

        await request.respondWith({
          status: 200
        })

        done()
      })

      expect(await resp).toBeTruthy()
    })

    test('webscript does not exist', async (done) => {
      const name = 'my-webscript'
      const resp = waylay.webscripts.exists(name)

      moxios.wait(async () => {
        const request = moxios.requests.mostRecent()

        expect(request.config).toMatchObject({ method: 'head' })
        expect(Url.parse(request.url)).toMatchObject({
          protocol: 'https:',
          host: expectedHost,
          path: `/api/v1/webscripts/${name}`
        })

        await request.respondWith({
          status: 404
        })

        done()
      })

      expect(await resp).toBeFalsy()
    })
  })
})

describe('_getEndpoint', () => {
  const registryBaseUrl = 'https://registry.waylay.io'

  test.each([
    ['foobar', `${registryBaseUrl}/foobar`],
    ['/foobar', `${registryBaseUrl}/foobar`],
    ['foobar/', `${registryBaseUrl}/foobar/`],
    ['foo/bar', `${registryBaseUrl}/foo/bar`]
  ])('with registry - %s', (path, expected) => {
    let waylay = new Waylay({
      registry: {
        baseUrl: registryBaseUrl
      }
    })

    const webscriptsEndpoint = waylay.webscripts._getEndpoint(path)

    expect(webscriptsEndpoint).toHaveProperty('url', expected)
  })

  test.each([
    ['foobar'],
    ['/foobar'],
    ['foobar/'],
    ['foo/bar/']
  ])('without registry - %s', (path) => {
    let waylay = new Waylay()

    const webscriptsEndpoint = waylay.webscripts._getEndpoint(path)

    expect(webscriptsEndpoint).toHaveProperty('path', path)
  })
})
