/* eslint-env jest */

const moxios = require('moxios')
const Url = require('url')

const Waylay = require('../index')
const Resource = require('../lib/resource')

afterEach(() => moxios.uninstall())

test('options', () => {
  expect(new Waylay({
    alarms: { baseUrl: 'custom-baseurl.waylay.io' }
  })).toHaveProperty('alarms.baseUrl', 'https://custom-baseurl.waylay.io')

  expect(new Waylay({
    alarms: { baseUrl: 'http://custom-baseurl.waylay.io' }
  })).toHaveProperty('alarms.baseUrl', 'http://custom-baseurl.waylay.io')

  expect(new Waylay({
    domain: 'custom-baseurl.waylay.io',
    alarms: { baseUrl: undefined }
  })).toHaveProperty('alarms.baseUrl', undefined)

  expect(new Waylay({
    domain: 'custom-baseurl.waylay.io',
    resources: { baseUrl: undefined }
  })).toHaveProperty('resources.baseUrl', undefined)
})

test('url configuration options', () => {
  const globalSettings = {
    domain: 'mydomain',
    waylay_data: 'fromGlobal'
  }
  expect(new Waylay()).toHaveProperty('data.baseUrl', 'https://data.waylay.io')
  expect(new Waylay({ data: { baseUrl: 'xyz' } })).toHaveProperty('data.baseUrl', 'https://xyz')
  expect(new Waylay().withSettings(globalSettings)).toHaveProperty('data.baseUrl', 'https://fromGlobal')
  expect(new Waylay({ data: { baseUrl: 'xyz' } }).withSettings(globalSettings)).toHaveProperty('data.baseUrl', 'https://xyz')
  expect(new Waylay({ domain: 'mydomain' })).toHaveProperty('resources.baseUrl', 'https://mydomain')
  expect(new Waylay({ resources: { baseUrl: 'asdf' } })).toHaveProperty('resources.baseUrl', 'https://asdf')
  expect(new Waylay().withSettings({
    domain: 'mydomain',
    waylay_api: 'apiFromSettings'
  })).toHaveProperty('resources.baseUrl', 'https://apiFromSettings')
  expect(new Waylay({})).toHaveProperty('resources.baseUrl', '')
  const w = new Waylay()
  w.resources.baseUrl = 'xyz'
  expect(w).toHaveProperty('resources.baseUrl', 'https://xyz')
  w.alarms.baseUrl = 'xyz'
  expect(w).toHaveProperty('alarms.baseUrl', 'https://xyz')
})

test('_request without baseUrl should respect domain', done => {
  const client = new Waylay({
    domain: 'automated-test.waylay.io'
  })
  moxios.install(client.httpClient)

  const resource = new Resource({ client })

  expect(resource).toHaveProperty('baseUrl', 'https://automated-test.waylay.io')

  resource._request({ path: '/' })

  moxios.wait(() => {
    const request = moxios.requests.mostRecent()

    expect(request.config).toMatchObject({ method: 'get' })
    expect(Url.parse(request.url)).toMatchObject({
      protocol: 'https:',
      hostname: 'automated-test.waylay.io',
      path: '/'
    })

    done()
  })
})

test('_request with baseUrl', done => {
  const client = new Waylay({
    domain: 'automated-test.waylay.io'
  })
  moxios.install(client.httpClient)

  const resource = new Resource({ client, baseUrl: 'https://base-url.waylay.io' })

  expect(resource).toHaveProperty('baseUrl', 'https://base-url.waylay.io')

  resource._request({ path: '/' })

  moxios.wait(() => {
    const request = moxios.requests.mostRecent()

    expect(request.config).toMatchObject({ method: 'get' })
    expect(Url.parse(request.url)).toMatchObject({
      protocol: 'https:',
      hostname: 'base-url.waylay.io',
      path: '/'
    })

    done()
  })
})

test('unconfigured resource endpoint', () => {
  const client = new Waylay()
  const resource = new Resource(null, client)
  expect(resource._client).toBe(client)
  expect(resource.baseUrl).toBe('')
  client.domain = 'myDomain.io'
  expect(resource.baseUrl).toBe('https://myDomain.io')
  client.domain = null
  expect(resource.baseUrl).toBe('')
})
