/* eslint-env jest */

const Url = require('url')
const Waylay = require('../index')
const moxios = require('moxios')

const waylay = new Waylay({ domain: 'my-domain.waylay.io' })
const host = 'policies.waylay.io'

beforeEach(() => moxios.install(waylay.httpClient))
afterEach(() => moxios.uninstall())

test('list', done => {
  waylay.policies.list()

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'get' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: host,
      path: '/'
    })

    done()
  })
})

test('get', done => {
  const id = 'abc-123'
  waylay.policies.get(id)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'get' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: host,
      path: `/${id}`
    })

    done()
  })
})

test('create', done => {
  const policy = { }

  waylay.policies.create(policy)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'post',
      data: JSON.stringify(policy)
    })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: host,
      path: '/'
    })

    done()
  })
})

test('update', done => {
  const { id, policy } = { id: 'abc-123', policy: {} }
  waylay.policies.update(id, policy)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'put',
      data: JSON.stringify(policy)
    })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: host,
      path: `/${id}`
    })

    done()
  })
})

test('patch', done => {
  const { id, policy } = { id: 'abc-123', policy: {} }
  waylay.policies.patch(id, policy)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'patch',
      data: JSON.stringify(policy)
    })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: host,
      path: `/${id}`
    })

    done()
  })
})

test('remove', done => {
  const id = 'abc-123'
  waylay.policies.remove(id)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'delete' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: host,
      path: `/${id}`
    })

    done()
  })
})
