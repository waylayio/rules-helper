/* eslint-env jest */

const Url = require('url')
const moxios = require('moxios')
const Waylay = require('../index')
const qs = require('querystring')

const waylay = new Waylay({
  token: 'a-test-token',
  domain: 'my-domain.waylay.io'
})

beforeEach(() => moxios.install(waylay.httpClient))
afterEach(() => moxios.uninstall())

test('configuration', done => {
  const waylay = new Waylay({
    domain: 'my-domain.waylay.io'
  })
    .withSettings({
      waylay_api: 'https://test.waylay.io'
    })

  moxios.install(waylay.httpClient)

  waylay.types.list()

  moxios.wait(() => {
    expect(waylay.types.baseUrl).toEqual('https://test.waylay.io')

    const { url } = moxios.requests.mostRecent()
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'test.waylay.io'
    })

    done()
  })
})

test('baseUrl override options', () => {
  expect(new Waylay()).toHaveProperty('types.baseUrl', '')
  expect(new Waylay({ domain: 'myDomain' })).toHaveProperty('types.baseUrl', 'https://myDomain')
  expect(new Waylay({ types: { baseUrl: 'typesHost' } })).toHaveProperty('types.baseUrl', 'https://typesHost')
  expect(new Waylay({ api: { baseUrl: 'apiHost' } })).toHaveProperty('types.baseUrl', 'https://apiHost')
  expect(new Waylay({ globalSettings: { waylay_api: 'globalApi' } })).toHaveProperty('types.baseUrl', 'https://globalApi')
  var fullOpts = {
    types: { baseUrl: 'typesHost' },
    api: { baseUrl: 'apiHost' },
    domain: 'myDomain',
    globalSettings: {
      waylay_api: 'globalApi'
    }
  }
  expect(new Waylay(fullOpts)).toHaveProperty('types.baseUrl', 'https://typesHost')
  delete fullOpts.types
  expect(new Waylay(fullOpts)).toHaveProperty('types.baseUrl', 'https://apiHost')
  delete fullOpts.api
  expect(new Waylay(fullOpts)).toHaveProperty('types.baseUrl', 'https://globalApi')
  delete fullOpts.globalSettings.waylay_api
  expect(new Waylay(fullOpts)).toHaveProperty('types.baseUrl', 'https://myDomain')
  delete fullOpts.domain
  expect(new Waylay(fullOpts)).toHaveProperty('types.baseUrl', '')

  const waylay = new Waylay(fullOpts)
  waylay.types.baseUrl = 'xyz'
  expect(waylay).toHaveProperty('types.baseUrl', 'https://xyz')
})

test('create', done => {
  const type = { name: 'foo' }
  waylay.types.create(type)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'post',
      data: JSON.stringify(type)
    })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: '/api/resourcetypes'
    })

    done()
  })
})

test('remove', done => {
  const id = 'my-type'
  waylay.types.remove(id)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'delete' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: `/api/resourcetypes/${id}`
    })

    done()
  })
})

test('update', done => {
  const id = 'my-type'
  const type = { name: 'foo' }
  waylay.types.update(id, type)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'put',
      data: JSON.stringify(type)
    })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: `/api/resourcetypes/${id}`
    })

    done()
  })
})

test('list', done => {
  waylay.types.list()

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'get'
    })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: '/api/resourcetypes'
    })

    done()
  })
})

test('list with params', done => {
  const params = { foo: 'bar' }
  waylay.types.list(params)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'get',
      params: { foo: 'bar' }
    })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: '/api/resourcetypes?foo=bar'
    })

    done()
  })
})

test('get', done => {
  const id = 'foo'
  waylay.types.get(id)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'get'
    })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: `/api/resourcetypes/${id}`
    })

    done()
  })
})

test('constraints', done => {
  const id = 'foo'
  waylay.types.constraints(id)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'get'
    })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: `/api/resourcetypes/${id}/constraints`
    })

    done()
  })
})

test('constraints w/ options', done => {
  const id = 'foo'
  const options = { headers: { Accept: 'application/schema+json' } }
  waylay.types.constraints(id, options)

  moxios.wait(() => {
    const { config, url, headers } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'get'
    })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: `/api/resourcetypes/${id}/constraints`
    })
    expect(headers).toMatchObject({ Accept: 'application/schema+json' })

    done()
  })
})

test('patch with commands', done => {
  const id = 'my-type'
  const data = {
    id: id,
    name: 'test-command',
    commands: [{
      testCommands: {
        actuator: {
          name: 'debugDialog',
          version: 'latest',
          properties: {
            message: 'Hello !'
          }
        }
      }
    }]
  }

  waylay.types.patch(id, data)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'patch',
      data: JSON.stringify(data)
    })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: `/api/resourcetypes/${id}`
    })

    done()
  })
})

test('get changelog', done => {
  const resourceType = 'foo'
  waylay.types.changelog(resourceType)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'get',
      headers: {
        'Accept': 'application/vnd.waylay.paged+json'
      }
    })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: `/api/resourcetypes/${resourceType}/changes?${qs.stringify({ limit: 10, skip: 0 })}`
    })

    done()
  })
})

test('get changelog with limit & skip', done => {
  const resourceType = 'foo'
  waylay.types.changelog(resourceType, { skip: 10, limit: 5 })

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'get',
      headers: {
        'Accept': 'application/vnd.waylay.paged+json'
      }
    })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: `/api/resourcetypes/${resourceType}/changes?${qs.stringify({ limit: 5, skip: 10 })}`
    })

    done()
  })
})

describe('batch', () => {
  test('raw', done => {
    const action = 'delete'
    const query = {
      ids: ['resource-type-id-1', 'resource-type-id-2']
    }

    waylay.types.batch.raw(action, query)

    moxios.wait(() => {
      const { config, url } = moxios.requests.mostRecent()

      expect(config).toMatchObject({
        method: 'post',
        data: JSON.stringify({
          entity: 'resourcetype',
          action,
          query
        })
      })
      expect(Url.parse(url)).toMatchObject({
        protocol: 'https:',
        host: 'my-domain.waylay.io',
        path: '/api/batch'
      })

      done()
    })
  })

  test('remove', done => {
    const ids = ['resource-type-id-1', 'resource-type-id-2']

    waylay.types.batch.remove(ids)

    moxios.wait(() => {
      const { config, url } = moxios.requests.mostRecent()

      expect(config).toMatchObject({
        method: 'post',
        data: JSON.stringify({
          entity: 'resourcetype',
          action: 'delete',
          query: {
            ids
          }
        })
      })
      expect(Url.parse(url)).toMatchObject({
        protocol: 'https:',
        host: 'my-domain.waylay.io',
        path: '/api/batch'
      })

      done()
    })
  })

  test('revalidate', done => {
    const id = 'foo'
    waylay.types.revalidate(id)

    moxios.wait(() => {
      const { config, url } = moxios.requests.mostRecent()

      expect(config).toMatchObject({
        method: 'post'
      })
      expect(Url.parse(url)).toMatchObject({
        protocol: 'https:',
        host: 'my-domain.waylay.io',
        path: `/api/resourcetypes/${id}/revalidate`
      })

      done()
    })
  })
})
