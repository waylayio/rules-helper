/* eslint-env jest */

const Url = require('url')
const moxios = require('moxios')
const Waylay = require('../index')
const qs = require('querystring')

const waylay = new Waylay({
  token: 'a-test-token',
  domain: 'my-domain.waylay.io'
})

beforeEach(() => moxios.install(waylay.httpClient))
afterEach(() => moxios.uninstall())

test('baseUrl overrride options', () => {
  expect(new Waylay()).toHaveProperty('resources.baseUrl', '')
  expect(new Waylay({ domain: 'myDomain' })).toHaveProperty('resources.baseUrl', 'https://myDomain')
  expect(new Waylay({ resources: { baseUrl: 'resourcesHost' } })).toHaveProperty('resources.baseUrl', 'https://resourcesHost')
  expect(new Waylay({ api: { baseUrl: 'apiHost' } })).toHaveProperty('resources.baseUrl', 'https://apiHost')
  expect(new Waylay({ globalSettings: { waylay_api: 'globalApi' } })).toHaveProperty('resources.baseUrl', 'https://globalApi')
  var fullOpts = {
    resources: { baseUrl: 'resourcesHost' },
    api: { baseUrl: 'apiHost' },
    domain: 'myDomain',
    globalSettings: {
      waylay_api: 'globalApi',
      waylay_resources: 'globalResources'
    }
  }
  expect(new Waylay(fullOpts)).toHaveProperty('resources.baseUrl', 'https://resourcesHost')
  delete fullOpts.resources
  expect(new Waylay(fullOpts)).toHaveProperty('resources.baseUrl', 'https://apiHost')
  delete fullOpts.api
  expect(new Waylay(fullOpts)).toHaveProperty('resources.baseUrl', 'https://globalResources')
  delete fullOpts.globalSettings.waylay_resources
  expect(new Waylay(fullOpts)).toHaveProperty('resources.baseUrl', 'https://globalApi')
  delete fullOpts.globalSettings.waylay_api
  expect(new Waylay(fullOpts)).toHaveProperty('resources.baseUrl', 'https://myDomain')
  delete fullOpts.domain
  expect(new Waylay(fullOpts)).toHaveProperty('resources.baseUrl', '')
})

test('create', done => {
  const resource = { name: 'foo' }
  waylay.resources.create(resource)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'post',
      data: JSON.stringify(resource)
    })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: '/api/resources'
    })

    done()
  })
})

test('get', done => {
  const id = 'foo'
  waylay.resources.get(id)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'get' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: `/api/resources/${id}`
    })

    done()
  })
})

test('get', done => {
  const id = 'foo'
  waylay.resources.get(id, {
    headers: {
      foo: 'bar'
    }
  })

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'get', headers: { foo: 'bar' } })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: `/api/resources/${id}`
    })

    done()
  })
})

test('children', done => {
  const id = 'foo'
  const query = { limit: 10, skip: 0 }
  waylay.resources.children(id)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'get' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: `/api/resources/${id}/children?${qs.stringify(query)}`
    })

    done()
  })
})

test('parent', done => {
  const id = 'foo'
  const parentId = 'bar'
  waylay.resources.parent(id)

  moxios.wait(async () => {
    const request = moxios.requests.mostRecent()

    expect(request.config).toMatchObject({ method: 'get' })
    expect(Url.parse(request.url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: `/api/resources/${id}`
    })

    await request.respondWith({
      status: 200,
      response: { parentId }
    })

    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'get' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: `/api/resources/${parentId}`
    })

    done()
  })
})

test('resource without parent', done => {
  const id = 'foo'
  waylay.resources.parent(id)

  moxios.wait(async () => {
    const request = moxios.requests.mostRecent()

    expect(request.config).toMatchObject({ method: 'get' })
    expect(Url.parse(request.url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: `/api/resources/${id}`
    })

    await request.respondWith({
      status: 200,
      response: { parentId: undefined }
    })

    const parentRequest = moxios.requests.at(1)

    expect(parentRequest).toEqual(undefined)
    expect(moxios.requests.count()).toEqual(1)

    done()
  })
})

test('references', done => {
  const id = 'foo'
  const referenceId = 'bar'
  const secondRefId = 'bar2'
  waylay.resources.references(id)

  moxios.wait(async () => {
    const request = moxios.requests.mostRecent()

    expect(request.config).toMatchObject({
      method: 'get',
      headers: { Accept: 'application/hal+json' }
    })
    expect(Url.parse(request.url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: `/api/resources/${id}`
    })

    await request.respondWith({
      status: 200,
      response: {
        _links: {
          reference: {
            id: referenceId
          },
          secondRef: {
            id: secondRefId
          }
        }
      }
    })

    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'get' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: `/api/resources?id=${referenceId}&id=${secondRefId}`
    })

    done()
  })
})

test('resource without references', done => {
  const id = 'foo'
  waylay.resources.references(id)

  moxios.wait(async () => {
    const request = moxios.requests.mostRecent()

    expect(request.config).toMatchObject({
      method: 'get',
      headers: { Accept: 'application/hal+json' }
    })
    expect(Url.parse(request.url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: `/api/resources/${id}`
    })

    await request.respondWith({
      status: 200,
      response: {
        _links: {
          self: {
            id
          }
        }
      }
    })

    const referenceRequest = moxios.requests.at(1)

    expect(referenceRequest).toEqual(undefined)
    expect(moxios.requests.count()).toEqual(1)

    done()
  })
})

test('referrers', done => {
  const id = 'foo'
  const query = { limit: 10, skip: 0 }
  waylay.resources.referrers(id)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'get' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: `/api/resources/${id}/referrers?${qs.stringify(query)}`
    })

    done()
  })
})

test('referrers with params', done => {
  const id = 'foo'
  const params = { limit: 5, skip: 5 }
  waylay.resources.referrers(id, params)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'get' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: `/api/resources/${id}/referrers?${qs.stringify(params)}`
    })

    done()
  })
})

test('update', done => {
  const id = 'foo'
  const resource = { name: 'bar' }
  waylay.resources.update(id, resource)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'patch' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: `/api/resources/${id}`
    })

    done()
  })
})

test('replace', done => {
  const id = 'foo'
  const resource = { name: 'bar' }
  waylay.resources.replace(id, resource)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'put' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: `/api/resources/${id}`
    })

    done()
  })
})

test('remove', done => {
  const id = 'foo'
  waylay.resources.remove(id)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'delete' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: `/api/resources/${id}`
    })

    done()
  })
})

test('search', done => {
  const query = { filter: 'foo' }
  waylay.resources.search(query, {
    headers: {
      foo: 'bar'
    }
  })

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'get', headers: { foo: 'bar' } })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: `/api/resources?${qs.stringify(query)}`
    })

    done()
  })
})

test('search', done => {
  const query = { filter: 'foo' }
  waylay.resources.search(query)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'get' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: `/api/resources?${qs.stringify(query)}`
    })

    done()
  })
})

test('execute command', done => {
  const id = 'foo'
  const properties = { foo: 'bar' }

  waylay.resources.executeCommand(id, 'test-command', properties)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'post' })
    expect(config.data).toEqual(JSON.stringify({ foo: 'bar', name: 'test-command' }))

    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'data.waylay.io',
      path: `/resources/${id}/commands`
    })

    done()
  })
})

test('get command logs', done => {
  const resource = 'foo'
  waylay.resources.commandLogs(resource)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'get' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: `/api/resources/${resource}/commands?${qs.stringify({ limit: 10, skip: 0 })}`
    })

    done()
  })
})

test('get command logs should always go to engine', done => {
  let waylay = new Waylay({
    token: 'a-test-token',
    domain: 'my-domain.waylay.io',
    resources: {
      baseUrl: 'https://resources.waylay.io'
    }
  })

  const resource = 'foo'
  waylay.resources.commandLogs(resource)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'get' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: `/api/resources/${resource}/commands?${qs.stringify({ limit: 10, skip: 0 })}`
    })

    done()
  })
})

test('get changelog', done => {
  const resource = 'foo'
  waylay.resources.changelog(resource)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'get',
      headers: {
        'Accept': 'application/vnd.waylay.paged+json'
      }
    })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: `/api/resources/${resource}/changes?${qs.stringify({ limit: 10, skip: 0 })}`
    })

    done()
  })
})

test('get changelog with limit & skip', done => {
  const resource = 'foo'
  waylay.resources.changelog(resource, { skip: 10, limit: 5 })

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'get',
      headers: {
        'Accept': 'application/vnd.waylay.paged+json'
      }
    })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: `/api/resources/${resource}/changes?${qs.stringify({ limit: 5, skip: 10 })}`
    })

    done()
  })
})

describe('batch', () => {
  test('raw', done => {
    const action = 'delete'
    const query = {
      ids: ['resource-id-1', 'resource-id-2']
    }

    waylay.resources.batch.raw(action, query)

    moxios.wait(() => {
      const { config, url } = moxios.requests.mostRecent()

      expect(config).toMatchObject({
        method: 'post',
        data: JSON.stringify({
          entity: 'resource',
          action,
          query
        })
      })
      expect(Url.parse(url)).toMatchObject({
        protocol: 'https:',
        host: 'my-domain.waylay.io',
        path: '/api/batch'
      })

      done()
    })
  })

  test('remove', done => {
    const ids = ['resource-id-1', 'resource-id-2']

    waylay.resources.batch.remove(ids)

    moxios.wait(() => {
      const { config, url } = moxios.requests.mostRecent()

      expect(config).toMatchObject({
        method: 'post',
        data: JSON.stringify({
          entity: 'resource',
          action: 'delete',
          query: {
            ids
          }
        })
      })
      expect(Url.parse(url)).toMatchObject({
        protocol: 'https:',
        host: 'my-domain.waylay.io',
        path: '/api/batch'
      })

      done()
    })
  })
})
