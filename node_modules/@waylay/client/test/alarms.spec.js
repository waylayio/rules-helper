/* eslint-env jest */

const Url = require('url')
const moxios = require('moxios')
const Waylay = require('../index')
const qs = require('querystring')

const waylay = new Waylay({
  token: 'a-test-token'
})

beforeEach(() => moxios.install(waylay.httpClient))
afterEach(() => moxios.uninstall())

test('create', done => {
  const alarm = { name: 'foo' }
  waylay.alarms.create(alarm)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'post',
      data: JSON.stringify(alarm)
    })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'alarms.waylay.io',
      path: '/alarm/alarms'
    })

    done()
  })
})

test('get', done => {
  waylay.alarms.get(123)

  moxios.wait(() => {
    const req = moxios.requests.mostRecent()

    expect(Url.parse(req.url)).toMatchObject({
      protocol: 'https:',
      host: 'alarms.waylay.io',
      path: '/alarm/alarms/123'
    })

    done()
  })
})

test('search', done => {
  const query = { 'name': 'foo' }
  waylay.alarms.search(query)

  moxios.wait(() => {
    const req = moxios.requests.mostRecent()

    expect(Url.parse(req.url)).toMatchObject({
      query: qs.stringify(query)
    })

    done()
  })
})

test('test with Array in params', done => {
  const filter = { 'name': ['foo', 'bar'] }
  waylay.alarms.search(filter)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'get' })
    expect(Url.parse(url)).toMatchObject({
      query: qs.stringify(filter)
    })

    done()
  })
})

test('update', done => {
  const alarm = { name: 'new-alarm' }
  waylay.alarms.update('alarm123', alarm)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'put',
      data: JSON.stringify(alarm)
    })
    expect(Url.parse(url)).toMatchObject({
      path: '/alarm/alarms/alarm123'
    })

    done()
  })
})

test('update', done => {
  const alarm = { name: 'new-alarm' }
  waylay.alarms.update('alarm123', alarm)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'put',
      data: JSON.stringify(alarm)
    })
    expect(Url.parse(url)).toMatchObject({
      path: '/alarm/alarms/alarm123'
    })

    done()
  })
})

test('remove', done => {
  waylay.alarms.remove('alarm123')

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'delete' })
    expect(Url.parse(url)).toMatchObject({
      path: '/alarm/alarms/alarm123'
    })

    done()
  })
})

test('removeAll', done => {
  const filter = { 'name': 'foo' }
  waylay.alarms.removeAll(filter)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'delete' })
    expect(Url.parse(url)).toMatchObject({
      query: qs.stringify(filter)
    })

    done()
  })
})

test('timeline without from/to', done => {
  const resourceIds = ['foo', 'bar']
  waylay.alarms.timeline(resourceIds)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'get' })
    expect(Url.parse(url)).toMatchObject({
      query: qs.stringify({
        source: resourceIds
      })
    })

    done()
  })
})

test('timeline with from/to', done => {
  const resourceIds = ['foo', 'bar']
  const from = 12345
  const to = 12345
  waylay.alarms.timeline(resourceIds, from, to)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'get' })
    expect(Url.parse(url)).toMatchObject({
      query: qs.stringify({
        source: resourceIds,
        from,
        to
      })
    })

    done()
  })
})

describe('batch', () => {
  test('raw', done => {
    const action = 'delete'
    const query = {
      ids: ['alarm-id-1', 'alarm-id-2']
    }

    waylay.alarms.batch.raw(action, query)

    moxios.wait(() => {
      const { config, url } = moxios.requests.mostRecent()

      expect(config).toMatchObject({
        method: 'post',
        data: JSON.stringify({
          entity: 'alarm',
          action,
          query
        })
      })
      expect(Url.parse(url)).toMatchObject({
        protocol: 'https:',
        host: 'alarms.waylay.io',
        path: '/batch'
      })

      done()
    })
  })

  test('remove', done => {
    const ids = ['alarms-id-1', 'alarms-id-2']

    waylay.alarms.batch.remove(ids)

    moxios.wait(() => {
      const { config, url } = moxios.requests.mostRecent()

      expect(config).toMatchObject({
        method: 'post',
        data: JSON.stringify({
          entity: 'alarm',
          action: 'delete',
          query: {
            ids
          }
        })
      })
      expect(Url.parse(url)).toMatchObject({
        protocol: 'https:',
        host: 'alarms.waylay.io',
        path: '/batch'
      })

      done()
    })
  })

  test('update', done => {
    const ids = ['alarms-id-1', 'alarms-id-2']
    const params = {
      status: 'MINOR'
    }

    waylay.alarms.batch.update(ids, params)

    moxios.wait(() => {
      const { config, url } = moxios.requests.mostRecent()

      expect(config).toMatchObject({
        method: 'post',
        data: JSON.stringify({
          entity: 'alarm',
          action: 'update',
          query: {
            ids
          },
          actionParameters: params
        })
      })
      expect(Url.parse(url)).toMatchObject({
        protocol: 'https:',
        host: 'alarms.waylay.io',
        path: '/batch'
      })

      done()
    })
  })
})
