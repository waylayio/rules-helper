/* eslint-env jest */

const Url = require('url')
const moxios = require('moxios')
const Waylay = require('../index')

const waylay = new Waylay({
  token: 'a-test-token'
})

beforeEach(() => moxios.install(waylay.httpClient))
afterEach(() => moxios.uninstall())

describe('set', () => {
  test('plain string', done => {
    const value = 'testing123'
    const key = 'my-secret'

    waylay.vault.set(key, value)

    moxios.wait(() => {
      const { config, url } = moxios.requests.mostRecent()

      expect(config).toMatchObject({
        method: 'put',
        data: value
      })

      expect(config.headers).toHaveProperty('Content-Type', 'text/plain')
      expect(config.headers).not.toHaveProperty('content-type') // no double headers

      expect(Url.parse(url)).toMatchObject({
        protocol: 'https:',
        host: 'vault.waylay.io',
        path: `/vault/${key}`
      })

      done()
    })
  })

  test('plain object', done => {
    const value = { foo: 'bar' }
    const key = 'my-secret'

    waylay.vault.set(key, value)

    moxios.wait(() => {
      const { config, url } = moxios.requests.mostRecent()

      expect(config).toMatchObject({
        method: 'put',
        data: JSON.stringify(value)
      })

      expect(config.headers).toHaveProperty('Content-Type', 'application/json')

      expect(Url.parse(url)).toMatchObject({
        protocol: 'https:',
        host: 'vault.waylay.io',
        path: `/vault/${key}`
      })

      done()
    })
  })

  test('node buffer', done => {
    const value = Buffer.from('hello, world', 'utf8')
    const key = 'my-secret'

    waylay.vault.set(key, value)

    moxios.wait(() => {
      const { config, url } = moxios.requests.mostRecent()

      expect(config).toMatchObject({
        method: 'put',
        data: value
      })

      expect(config.headers).toHaveProperty('Content-Type', 'application/octet-stream')

      expect(Url.parse(url)).toMatchObject({
        protocol: 'https:',
        host: 'vault.waylay.io',
        path: `/vault/${key}`
      })

      done()
    })
  })

  test('Uint8Array', done => {
    const value = Uint8Array.from([1, 2, 3])
    const key = 'my-secret'

    waylay.vault.set(key, value)

    moxios.wait(() => {
      const { config, url } = moxios.requests.mostRecent()

      expect(config).toMatchObject({ method: 'put' })
      expect(config.data.byteLength).toBe(value.byteLength)

      expect(config.headers).toHaveProperty('Content-Type', 'application/octet-stream')

      expect(Url.parse(url)).toMatchObject({
        protocol: 'https:',
        host: 'vault.waylay.io',
        path: `/vault/${key}`
      })

      done()
    })
  })

  test('unsupported', () => {
    const value = new Error() // we don't support error types
    const key = 'my-secret'

    expect(waylay.vault.set(key, value)).rejects.toThrowErrorMatchingSnapshot()
  })
})

test('get', done => {
  const key = 'my-secret'
  waylay.vault.get(key)

  moxios.wait(() => {
    const req = moxios.requests.mostRecent()

    expect(Url.parse(req.url)).toMatchObject({
      protocol: 'https:',
      host: 'vault.waylay.io',
      path: `/vault/${key}`
    })

    done()
  })
})

test('remove', done => {
  const key = 'my-secret'
  waylay.vault.remove(key)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'delete' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'vault.waylay.io',
      path: `/vault/${key}`
    })

    done()
  })
})

test('list keys', done => {
  waylay.vault.keys()

  moxios.wait(() => {
    const req = moxios.requests.mostRecent()

    expect(Url.parse(req.url)).toMatchObject({
      protocol: 'https:',
      host: 'vault.waylay.io',
      path: `/vault`
    })

    done()
  })
})
