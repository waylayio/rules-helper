/* eslint-env jest */

const Url = require('url')
const moxios = require('moxios')
const Waylay = require('../index')

const waylay = new Waylay({ token: 'a-test-token' })

beforeEach(() => moxios.install(waylay.httpClient))
afterEach(() => moxios.uninstall())
describe('hoard', () => {
  test('getTokens', (done) => {
    const provider = 'testProvider'
    const options = { sub: 'test' }
    waylay.hoard.getTokens(provider, options)

    moxios.wait(() => {
      const { config, url } = moxios.requests.mostRecent()

      expect(config).toMatchObject({
        method: 'get',
        headers: {
          'X-Waylay-Auth-Scope': 'personal'
        }
      })
      expect(Url.parse(url)).toMatchObject({
        protocol: 'https:',
        host: 'auth.waylay.io',
        path: `/tokens/${provider}?sub=test`
      })

      done()
    })
  })

  test('getTokens no options', (done) => {
    const provider = 'testProvider'
    waylay.hoard.getTokens(provider)

    moxios.wait(() => {
      const { config, url } = moxios.requests.mostRecent()

      expect(config).toMatchObject({
        method: 'get',
        headers: {
          'X-Waylay-Auth-Scope': 'personal'
        }
      })
      expect(Url.parse(url)).toMatchObject({
        protocol: 'https:',
        host: 'auth.waylay.io',
        path: `/tokens/${provider}`
      })

      done()
    })
  })

  test('getTokens organisation scope', (done) => {
    const provider = 'testProvider'
    const scope = 'organisation'
    const options = { scope }
    waylay.hoard.getTokens(provider, options)

    moxios.wait(() => {
      const { config, url } = moxios.requests.mostRecent()

      expect(config).toMatchObject({
        method: 'get',
        headers: {
          'X-Waylay-Auth-Scope': 'organisation'
        }
      })
      expect(Url.parse(url)).toMatchObject({
        protocol: 'https:',
        host: 'auth.waylay.io',
        path: `/tokens/${provider}`
      })

      done()
    })
  })

  test('getTokens no options', (done) => {
    waylay.hoard.getAllTokens()

    moxios.wait(() => {
      const { config, url } = moxios.requests.mostRecent()

      expect(config).toMatchObject({
        method: 'get',
        headers: {
          'X-Waylay-Auth-Scope': 'personal'
        }
      })
      expect(Url.parse(url)).toMatchObject({
        protocol: 'https:',
        host: 'auth.waylay.io',
        path: `/tokens`
      })

      done()
    })
  })

  test('getAllTokens ', (done) => {
    const options = { sub: 'test' }
    waylay.hoard.getAllTokens(options)

    moxios.wait(() => {
      const { config, url } = moxios.requests.mostRecent()

      expect(config).toMatchObject({
        method: 'get',
        headers: {
          'X-Waylay-Auth-Scope': 'personal'
        }
      })
      expect(Url.parse(url)).toMatchObject({
        protocol: 'https:',
        host: 'auth.waylay.io',
        path: `/tokens?sub=test`
      })

      done()
    })
  })

  test('provider', (done) => {
    const provider = 'testProvider'
    const options = { sub: 'test' }
    waylay.hoard.provider(provider, options)

    moxios.wait(() => {
      const { config, url } = moxios.requests.mostRecent()

      expect(config).toMatchObject({
        method: 'get',
        headers: {
          'X-Waylay-Auth-Scope': 'personal'
        }
      })

      expect(Url.parse(url)).toMatchObject({
        protocol: 'https:',
        host: 'auth.waylay.io',
        path: `/providers/${provider}?sub=test`
      })
      done()
    })
  })

  test('provider no options', (done) => {
    const provider = 'testProvider'
    waylay.hoard.provider(provider)

    moxios.wait(() => {
      const { config, url } = moxios.requests.mostRecent()

      expect(config).toMatchObject({
        method: 'get',
        headers: {
          'X-Waylay-Auth-Scope': 'personal'
        }
      })

      expect(Url.parse(url)).toMatchObject({
        protocol: 'https:',
        host: 'auth.waylay.io',
        path: `/providers/${provider}`
      })
      done()
    })
  })

  test('providers all', (done) => {
    const options = { sub: 'test' }
    waylay.hoard.providers(options)

    moxios.wait(() => {
      const { config, url } = moxios.requests.mostRecent()

      expect(config).toMatchObject({
        method: 'get',
        headers: {
          'X-Waylay-Auth-Scope': 'personal'
        }
      })

      expect(Url.parse(url)).toMatchObject({
        protocol: 'https:',
        host: 'auth.waylay.io',
        path: `/providers?sub=test`
      })
      done()
    })
  })

  test('providers all, no options', (done) => {
    waylay.hoard.providers()

    moxios.wait(() => {
      const { config, url } = moxios.requests.mostRecent()

      expect(config).toMatchObject({
        method: 'get',
        headers: {
          'X-Waylay-Auth-Scope': 'personal'
        }
      })

      expect(Url.parse(url)).toMatchObject({
        protocol: 'https:',
        host: 'auth.waylay.io',
        path: `/providers`
      })
      done()
    })
  })

  test('remove provider', (done) => {
    const provider = 'testProvider'
    const options = { sub: 'test' }
    waylay.hoard.remove(provider, options)

    moxios.wait(() => {
      const { config, url } = moxios.requests.mostRecent()

      expect(config).toMatchObject({
        method: 'delete',
        headers: {
          'X-Waylay-Auth-Scope': 'personal'
        }
      })
      expect(Url.parse(url)).toMatchObject({
        protocol: 'https:',
        host: 'auth.waylay.io',
        path: `/tokens/${provider}?sub=test`
      })

      done()
    })
  })

  test('remove provider no options', (done) => {
    const provider = 'testProvider'
    waylay.hoard.remove(provider)

    moxios.wait(() => {
      const { config, url } = moxios.requests.mostRecent()

      expect(config).toMatchObject({
        method: 'delete',
        headers: {
          'X-Waylay-Auth-Scope': 'personal'
        }
      })
      expect(Url.parse(url)).toMatchObject({
        protocol: 'https:',
        host: 'auth.waylay.io',
        path: `/tokens/${provider}`
      })

      done()
    })
  })

  test('remove all tokens no options', (done) => {
    waylay.hoard.removeAll()

    moxios.wait(() => {
      const { config, url } = moxios.requests.mostRecent()

      expect(config).toMatchObject({
        method: 'delete',
        headers: {
          'X-Waylay-Auth-Scope': 'personal'
        }
      })
      expect(Url.parse(url)).toMatchObject({
        protocol: 'https:',
        host: 'auth.waylay.io',
        path: `/tokens`
      })

      done()
    })
  })

  test('remove all tokens', (done) => {
    const options = { sub: 'test' }
    waylay.hoard.removeAll(options)

    moxios.wait(() => {
      const { config, url } = moxios.requests.mostRecent()

      expect(config).toMatchObject({
        method: 'delete',
        headers: {
          'X-Waylay-Auth-Scope': 'personal'
        }
      })
      expect(Url.parse(url)).toMatchObject({
        protocol: 'https:',
        host: 'auth.waylay.io',
        path: `/tokens?sub=test`
      })

      done()
    })
  })
})
