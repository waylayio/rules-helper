/* eslint-env jest */

const Url = require('url')
const moxios = require('moxios')
const Waylay = require('../index')
const qs = require('querystring')

const waylay = new Waylay({
  token: 'a-test-token',
  domain: 'my-domain.waylay.io'
})

beforeEach(() => moxios.install(waylay.httpClient))
afterEach(() => moxios.uninstall())

test('create without parameters', done => {
  const task = { name: 'foo' }
  waylay.tasks.create(task)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'post',
      data: JSON.stringify(task)
    })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: '/api/tasks'
    })

    done()
  })
})

test('create with params', done => {
  const task = { name: 'foo' }
  const params = { failOnWarning: true }
  waylay.tasks.create(task, params)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'post',
      data: JSON.stringify(task),
      params
    })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: '/api/tasks?failOnWarning=true'
    })

    done()
  })
})

test('update', done => {
  const task = { name: 'foo' }
  const taskId = 1
  waylay.tasks.update(taskId, task)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'put',
      data: JSON.stringify(task)
    })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: `/api/tasks/${taskId}`
    })

    done()
  })
})

test('list without options', done => {
  waylay.tasks.list()

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'get' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: `/api/tasks?${qs.stringify({ hits: 10, startIndex: 0 })}`
    })

    done()
  })
})

test('list fuzzy search', done => {
  waylay.tasks.list('test')

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'get' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: `/api/tasks?${qs.stringify({
        hits: 10,
        startIndex: 0,
        filter: 'test'
      })}`
    })

    done()
  })
})

test('list with options', done => {
  const filter = { filter: 'my-task', limit: 10, offset: 1, status: 'running' }
  waylay.tasks.list(filter)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'get' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: `/api/tasks?${qs.stringify({
        hits: 10,
        startIndex: 1,
        filter: 'my-task',
        status: 'running'
      })}`
    })

    done()
  })
})

test('list with query', done => {
  const filter = { status: 'running', plugin: 'mySensor@1.0.3' }
  waylay.tasks.list(filter)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'get' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: `/api/tasks?hits=10&startIndex=0&status=running&plugin=${encodeURIComponent(
        'mySensor@1.0.3'
      )}`
    })

    done()
  })
})

test('list with filter, params and options', done => {
  const filter = 'my-task'
  const startIndex = 5
  const hits = 15
  const params = { offset: startIndex, limit: hits }
  const options = {
    headers: { Accept: 'text/plain' }
  }

  waylay.tasks.list(filter, params, options)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'get' })
    expect(config.params).toMatchObject({ startIndex, hits })
    expect(config).toMatchObject(options)
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: `/api/tasks?${qs.stringify({ hits, startIndex, filter })}`
    })

    done()
  })
})

test('list with params and options', done => {
  const startIndex = 5
  const hits = 15
  const params = { offset: startIndex, limit: hits }
  const options = {
    headers: { Accept: 'text/plain' }
  }

  waylay.tasks.list(params, options)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'get' })
    expect(config.params).toMatchObject({ startIndex, hits })
    expect(config).toMatchObject(options)
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: `/api/tasks?${qs.stringify({ hits, startIndex })}`
    })

    done()
  })
})

test('count', done => {
  const spy = jest.fn()

  const filter = { template: 'template' }
  waylay.tasks.count(filter).then(spy)

  moxios.wait(async () => {
    const request = moxios.requests.mostRecent()

    expect(request.config).toMatchObject({ method: 'head' })
    expect(Url.parse(request.url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: `/api/tasks?hits=0&startIndex=0&template=${encodeURIComponent(
        'template'
      )}`
    })

    await request.respondWith({
      headers: {
        'x-count': '5'
      }
    })

    expect(spy).toHaveBeenCalledWith(5)

    done()
  })
})

test('count missing header', done => {
  const spy = jest.fn()

  const filter = { template: 'template' }
  waylay.tasks.count(filter).then(spy)

  moxios.wait(async () => {
    const request = moxios.requests.mostRecent()

    expect(request.config).toMatchObject({ method: 'head' })
    expect(Url.parse(request.url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: `/api/tasks?hits=0&startIndex=0&template=${encodeURIComponent(
        'template'
      )}`
    })

    await request.respondWith({
      headers: {}
    })

    expect(spy).toHaveBeenCalledWith(undefined)

    done()
  })
})

test('remove', done => {
  const id = 'my-task'
  waylay.tasks.remove(id)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'delete' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: `/api/tasks/${id}`
    })

    done()
  })
})

test('remove batch', done => {
  const ids = ['my-task', 'another-task']
  waylay.tasks.batchRemove(ids)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'delete' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: '/api/tasks?id=my-task&id=another-task',
      query: 'id=my-task&id=another-task'
    })

    done()
  })
})

test('remove batch without array', done => {
  waylay.tasks.batchRemove()

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'delete' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: '/api/tasks',
      query: null
    })

    done()
  })
})

test('get', done => {
  const id = 'my-task'
  waylay.tasks.get(id)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'get' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: `/api/tasks/${id}`
    })

    done()
  })
})

test('get with params and options', done => {
  const id = 'my-task'
  const params = { foo: 'bar' }
  const headers = {
    Accept: 'Application/vnd.waylay.resolved.graph+json'
  }

  waylay.tasks.get(id, params, { headers })

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'get', params })
    expect(config.headers).toMatchObject(headers)
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: `/api/tasks/${id}?foo=bar`
    })

    done()
  })
})

test('start', done => {
  const id = 'my-task'
  waylay.tasks.start(id)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'post' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: `/api/tasks/${id}/command/start`
    })

    done()
  })
})

test('stop', done => {
  const id = 'my-task'
  waylay.tasks.stop(id)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({ method: 'post' })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: `/api/tasks/${id}/command/stop`
    })

    done()
  })
})

test('stopAndRemove', done => {
  const id = 'my-task'
  waylay.tasks.stopAndRemove(id)

  moxios.wait(() => {
    moxios.requests.mostRecent().respondWith({
      status: 200
    })
    moxios.wait(() => {
      expect(moxios.requests.count()).toBe(2)

      const stop = moxios.requests.at(0)
      const remove = moxios.requests.at(1)

      expect(stop.config).toMatchObject({ method: 'post' })
      expect(remove.config).toMatchObject({ method: 'delete' })

      expect(Url.parse(stop.url)).toMatchObject({
        protocol: 'https:',
        host: 'my-domain.waylay.io',
        path: `/api/tasks/${id}/command/stop`
      })

      expect(Url.parse(remove.url)).toMatchObject({
        protocol: 'https:',
        host: 'my-domain.waylay.io',
        path: `/api/tasks/${id}`
      })

      done()
    })
  })
})

test('log', done => {
  const params = {
    taskId: 'my-task',
    logLevel: 'DEBUG',
    messageContains: 'foobar',
    from: 0,
    until: 100,
    pageToken: 'foobar'
  }

  waylay.tasks.log(params)

  moxios.wait(() => {
    const { config, url } = moxios.requests.mostRecent()

    expect(config).toMatchObject({
      method: 'post',
      data: JSON.stringify(params)
    })
    expect(Url.parse(url)).toMatchObject({
      protocol: 'https:',
      host: 'my-domain.waylay.io',
      path: `/api/tasklogs`
    })

    done()
  })
})

describe('batch', () => {
  test('raw', done => {
    const action = 'delete'
    const query = {
      ids: ['task-id-1', 'task-id-2']
    }

    waylay.tasks.batch.raw(action, query)

    moxios.wait(() => {
      const { config, url } = moxios.requests.mostRecent()

      expect(config).toMatchObject({
        method: 'post',
        data: JSON.stringify({
          entity: 'task',
          action,
          query
        })
      })
      expect(Url.parse(url)).toMatchObject({
        protocol: 'https:',
        host: 'my-domain.waylay.io',
        path: '/api/batch'
      })

      done()
    })
  })

  test('start', done => {
    const ids = ['task-id-1', 'task-id-2']

    waylay.tasks.batch.start(ids)

    moxios.wait(() => {
      const { config, url } = moxios.requests.mostRecent()

      expect(config).toMatchObject({
        method: 'post',
        data: JSON.stringify({
          entity: 'task',
          action: 'start',
          query: {
            ids
          }
        })
      })
      expect(Url.parse(url)).toMatchObject({
        protocol: 'https:',
        host: 'my-domain.waylay.io',
        path: '/api/batch'
      })

      done()
    })
  })

  test('stop', done => {
    const ids = ['task-id-1', 'task-id-2']

    waylay.tasks.batch.stop(ids)

    moxios.wait(() => {
      const { config, url } = moxios.requests.mostRecent()

      expect(config).toMatchObject({
        method: 'post',
        data: JSON.stringify({
          entity: 'task',
          action: 'stop',
          query: {
            ids
          }
        })
      })
      expect(Url.parse(url)).toMatchObject({
        protocol: 'https:',
        host: 'my-domain.waylay.io',
        path: '/api/batch'
      })

      done()
    })
  })

  test('remove', done => {
    const ids = ['task-id-1', 'task-id-2']

    waylay.tasks.batch.remove(ids)

    moxios.wait(() => {
      const { config, url } = moxios.requests.mostRecent()

      expect(config).toMatchObject({
        method: 'post',
        data: JSON.stringify({
          entity: 'task',
          action: 'delete',
          query: {
            ids
          }
        })
      })
      expect(Url.parse(url)).toMatchObject({
        protocol: 'https:',
        host: 'my-domain.waylay.io',
        path: '/api/batch'
      })

      done()
    })
  })

  test('pushState', done => {
    const id = 'my-task'
    const node = 'my-node'
    const state = 'my-state'

    waylay.tasks.pushState(id, node, state)

    moxios.wait(() => {
      const { config, url } = moxios.requests.mostRecent()

      expect(config).toMatchObject({
        method: 'post',
        data: `state=${state}`
      })
      expect(config.headers).toMatchObject({
        'Content-Type': 'application/x-www-form-urlencoded'
      })
      expect(Url.parse(url)).toMatchObject({
        protocol: 'https:',
        host: 'my-domain.waylay.io',
        path: `/api/tasks/${id}/nodes/${node}`
      })

      done()
    })
  })
})
